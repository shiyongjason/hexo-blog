{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/img/1.png","path":"img/1.png","modified":0,"renderable":0},{"_id":"source/img/1050920-20161207111940601-1823413171.png","path":"img/1050920-20161207111940601-1823413171.png","modified":0,"renderable":0},{"_id":"source/img/11.png","path":"img/11.png","modified":0,"renderable":0},{"_id":"source/img/12.png","path":"img/12.png","modified":0,"renderable":0},{"_id":"source/img/1213309-20171124114258203-696142645.jpg","path":"img/1213309-20171124114258203-696142645.jpg","modified":0,"renderable":0},{"_id":"source/img/13.png","path":"img/13.png","modified":0,"renderable":0},{"_id":"source/img/14.png","path":"img/14.png","modified":0,"renderable":0},{"_id":"source/img/15.png","path":"img/15.png","modified":0,"renderable":0},{"_id":"source/img/2.png","path":"img/2.png","modified":0,"renderable":0},{"_id":"source/img/3.png","path":"img/3.png","modified":0,"renderable":0},{"_id":"source/img/5.png","path":"img/5.png","modified":0,"renderable":0},{"_id":"source/img/6.png","path":"img/6.png","modified":0,"renderable":0},{"_id":"source/img/7.png","path":"img/7.png","modified":0,"renderable":0},{"_id":"source/img/iframe1.png","path":"img/iframe1.png","modified":0,"renderable":0},{"_id":"source/img/iframe2.png","path":"img/iframe2.png","modified":0,"renderable":0},{"_id":"source/img/muation.png","path":"img/muation.png","modified":0,"renderable":0},{"_id":"source/img/shuiyin1.png","path":"img/shuiyin1.png","modified":0,"renderable":0},{"_id":"source/img/shuiyin2.png","path":"img/shuiyin2.png","modified":0,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/indexcover.css","path":"css/indexcover.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/reward.css","path":"css/reward.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"db2a4130f68262da9a09b15c1cc4fd165a7848a7","modified":1673421773909},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"c2ab0bd2f230ed212a4048cc558ea242db941928","modified":1673420908114},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1673418882663},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1673418882663},{"_id":"public/2023/01/11/hello-world/index.html","hash":"d30f06f7e686454271ba644d0f6a5b7336fc4937","modified":1673425826759},{"_id":"public/index.html","hash":"e75cdd65386c9047f136034368b54c0b2de1bb83","modified":1673425826759},{"_id":"public/archives/index.html","hash":"d5bd8e6e1a686a01d1b1f9366e480a305cc655ee","modified":1673425826759},{"_id":"public/archives/2023/index.html","hash":"9dba80451b9deaa3271c46a00ef820f0fd27c8e2","modified":1673425826759},{"_id":"public/archives/2023/01/index.html","hash":"352b179b9b26539b139b78ef442b810ef132ec02","modified":1673425826759},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1673418950010},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1673418950010},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1673418950010},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1673418950010},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1673418950010},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1673418950010},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1673418950010},{"_id":"public/css/style.css","hash":"4da345d832a2682bcaee3ab3e22c15e3cd0e9cde","modified":1673418950010},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1673418950010},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1673418950010},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1673418950010},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1673418950010},{"_id":"source/_posts/CSS3新特性.md","hash":"e3889c72e77137b9135a72f1ae27fa9b44708657","modified":1673420310064},{"_id":"source/img/.DS_Store","hash":"250b7d021d5f79e71043ea41e78389b1e7a9a616","modified":1673422089362},{"_id":"source/.DS_Store","hash":"d81e01fc049b23814416143b5b72fe52304b47a4","modified":1673421652697},{"_id":"source/img/1.png","hash":"cdb022f9289b6ecb1fffe894279c54a6b00f3cf0","modified":1632366082921},{"_id":"source/img/11.png","hash":"8bfbebe9bfad0c8352fb07c1606c62d66784c8d0","modified":1632366082922},{"_id":"source/img/1050920-20161207111940601-1823413171.png","hash":"df193578f42449eafb2a9cc27dab2f2aa1521982","modified":1632366082922},{"_id":"source/img/12.png","hash":"ca586d0613326f624d42b36ed639aad336e399d9","modified":1632366082922},{"_id":"source/img/1213309-20171124114258203-696142645.jpg","hash":"04e7ed98705dfa811a0619f59d3993546cfb79ea","modified":1632366082923},{"_id":"source/img/13.png","hash":"8d5f314bacb11b61a374aef506749805a7c607ee","modified":1632366082923},{"_id":"source/img/14.png","hash":"810820b5d96560e93ce9117f286c9156acdd2ab6","modified":1632366082923},{"_id":"source/img/15.png","hash":"e44435cf14e4e177691bbe493eacdbdae5d290a5","modified":1632366082923},{"_id":"source/img/2.png","hash":"9f6bb4f685c702e90a24729f10bf6d200b0bbfce","modified":1632366082923},{"_id":"source/img/3.png","hash":"3ed1072ef1bbf734efdbfaf96fd0f43209fe9955","modified":1632366082924},{"_id":"source/img/5.png","hash":"59c6681977453a317a67a9365ae0775545475e18","modified":1632366082924},{"_id":"source/img/6.png","hash":"812a253ebe7956605d1f391a9af57494406b40fe","modified":1632366082924},{"_id":"source/img/7.png","hash":"1d768b62691950730bcdb2d7e19f3d181ce88567","modified":1632366082924},{"_id":"source/img/iframe2.png","hash":"f06c0ba1ba5b653665bdfe2732a33f24316b581f","modified":1632366082936},{"_id":"source/img/iframe1.png","hash":"f540e571ccf9b6e5c396939e96ed2faee3b34065","modified":1632366082935},{"_id":"source/img/muation.png","hash":"626935ff4a5e475b65256b2bf1e9870e6ee1b607","modified":1632366082936},{"_id":"source/img/shuiyin1.png","hash":"3220af14e62f6aa22524049cd2ce3516e799a5e9","modified":1673421638979},{"_id":"source/_posts/Symbol.md","hash":"88d30fc42807cbefd25e6f2e9b6342907f415654","modified":1673421203879},{"_id":"source/_posts/js-变量.md","hash":"4a42919a2e2651ec3855ae543f1ae8ca5fd8394e","modified":1673420960308},{"_id":"source/_posts/postMessage.md","hash":"fa4f0238de8f439b78d693ae88c4ed90e0bc01f7","modified":1673421341695},{"_id":"source/_posts/图片水印生成.md","hash":"00498382bc95ca5ac0e147ffb0bb52580f0c07a0","modified":1673421545349},{"_id":"source/_posts/数据解构.md","hash":"85a127bfb0a32bc5a28d25ebab6d87f9ddabf76e","modified":1673421056384},{"_id":"source/_posts/闭包-变量.md","hash":"d8db297996948ba74fbfb42cab761aea5223735e","modified":1673420649441},{"_id":"source/_posts/数组排序.md","hash":"8eec66a2708fcf060679cafbbcb308c6fccf1bc3","modified":1673420594055},{"_id":"source/img/shuiyin2.png","hash":"e3f6e85b136229ff5b836e41e4be9a70ce626117","modified":1673421632961},{"_id":"themes/matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/matery/README.md","hash":"d64f79581eaf7b2ce8205209de8b01311db41832","modified":1671984763000},{"_id":"themes/matery/README_CN.md","hash":"9c35a786d3dffc708f75d8a68b85b64dffa35572","modified":1671984763000},{"_id":"themes/matery/_config.yml","hash":"bb634efacafbf1d077dec311a1c0978f305e4f15","modified":1673425705426},{"_id":"themes/matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1671984763000},{"_id":"themes/matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1671984763000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1671984763000},{"_id":"themes/matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1671984763000},{"_id":"themes/matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1671984763000},{"_id":"themes/matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1671984763000},{"_id":"themes/matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1671984763000},{"_id":"themes/matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1671984763000},{"_id":"themes/matery/layout/layout.ejs","hash":"94c2fee85418370ca8f7d54050c852267e924eb7","modified":1671984763000},{"_id":"themes/matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1671984763000},{"_id":"themes/matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1671984763000},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"4765267aafe2871a2fdaeccd1598890219bd7d71","modified":1671984763000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"e8958bc066b3c2fcd4152604cc12f30020106848","modified":1671984763000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"f5c00f21af281a09dc7de89e82a3b442903451a7","modified":1671984763000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"e8b44268b59add61af44b7338527523d10d9d742","modified":1671984763000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1671984763000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"0953217f4e19a51dfc5a0ffc7d066406df18060b","modified":1671984763000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"70fccaea75ce48364222c4e5de0496e556b01cb1","modified":1671984763000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"6261f8191c3c1159f63ec7f9293bb93f7d2a3dbb","modified":1671984763000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"236668e72b01db91f5bf29eec4c79e34e2746d98","modified":1671984763000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1671984763000},{"_id":"themes/matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1671984763000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1671984763000},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/matery/source/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1671984763000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1606456707000},{"_id":"themes/matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606456707000},{"_id":"themes/matery/source/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1671984763000},{"_id":"themes/matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1671984763000},{"_id":"themes/matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1606456707000},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1671984763000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1671984763000},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1671984763000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1606456707000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1671984763000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1671984763000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"cfc58f191f9efc70b3c1200d4599b266cd69f3d3","modified":1673425191226},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"51d93763de778bdea530b334202b4b1f5105f919","modified":1673425247236},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1671984763000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1671984763000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1671984763000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1671984763000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1671984763000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1671984763000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1671984763000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1671984763000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1671984763000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1671984763000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1671984763000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1671984763000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1671984763000},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1671984763000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1671984763000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1671984763000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"public/atom.xml","hash":"931c0593a796f1ceab6de143ff1445fbf8251c1f","modified":1673424447959},{"_id":"public/sitemap.xml","hash":"35fa0b0678d2df230a6b0bab53f744bed08cd8c9","modified":1673424447959},{"_id":"public/sitemap.txt","hash":"aa3665a82df6fc5732ecf3001004251ffe658e35","modified":1673424447959},{"_id":"public/2023/01/11/图片水印生成/index.html","hash":"dc5a0e87aa00ba488897fb6281cc23612d7acc8e","modified":1673425826759},{"_id":"public/2023/01/11/postMessage/index.html","hash":"ff025e84dd7613c68636b10d4a2ebac9ed479a54","modified":1673425826759},{"_id":"public/2023/01/11/Symbol/index.html","hash":"57df8239a5944502b7d04d091b05dfc9392c3b73","modified":1673425826759},{"_id":"public/2023/01/11/数据解构/index.html","hash":"4ee9f74427c949bbaa8625742415a634608dad3f","modified":1673425826759},{"_id":"public/2023/01/11/js-变量/index.html","hash":"d2e0b23758d161345f4e2c277e0eabc0401aaab4","modified":1673425826759},{"_id":"public/2023/01/11/闭包-变量/index.html","hash":"d32509afdb0ec97025fb178d7840d23c04e3c5bc","modified":1673425826759},{"_id":"public/2023/01/11/数组排序/index.html","hash":"07688cc28952e7cb61200ac773ab316dea2092ed","modified":1673425826759},{"_id":"public/2023/01/11/CSS3新特性/index.html","hash":"a2e4bc0f8ee4b58c7dada4a1f1d06c8f2ce853a9","modified":1673425826759},{"_id":"public/img/1.png","hash":"cdb022f9289b6ecb1fffe894279c54a6b00f3cf0","modified":1673424447959},{"_id":"public/img/1050920-20161207111940601-1823413171.png","hash":"df193578f42449eafb2a9cc27dab2f2aa1521982","modified":1673424447959},{"_id":"public/img/11.png","hash":"8bfbebe9bfad0c8352fb07c1606c62d66784c8d0","modified":1673424447959},{"_id":"public/img/12.png","hash":"ca586d0613326f624d42b36ed639aad336e399d9","modified":1673424447959},{"_id":"public/img/1213309-20171124114258203-696142645.jpg","hash":"04e7ed98705dfa811a0619f59d3993546cfb79ea","modified":1673424447959},{"_id":"public/img/13.png","hash":"8d5f314bacb11b61a374aef506749805a7c607ee","modified":1673424447959},{"_id":"public/img/14.png","hash":"810820b5d96560e93ce9117f286c9156acdd2ab6","modified":1673424447959},{"_id":"public/img/15.png","hash":"e44435cf14e4e177691bbe493eacdbdae5d290a5","modified":1673424447959},{"_id":"public/img/2.png","hash":"9f6bb4f685c702e90a24729f10bf6d200b0bbfce","modified":1673424447959},{"_id":"public/img/5.png","hash":"59c6681977453a317a67a9365ae0775545475e18","modified":1673424447959},{"_id":"public/img/3.png","hash":"3ed1072ef1bbf734efdbfaf96fd0f43209fe9955","modified":1673424447959},{"_id":"public/img/6.png","hash":"812a253ebe7956605d1f391a9af57494406b40fe","modified":1673424447959},{"_id":"public/img/7.png","hash":"1d768b62691950730bcdb2d7e19f3d181ce88567","modified":1673424447959},{"_id":"public/img/iframe2.png","hash":"f06c0ba1ba5b653665bdfe2732a33f24316b581f","modified":1673424447959},{"_id":"public/img/shuiyin1.png","hash":"3220af14e62f6aa22524049cd2ce3516e799a5e9","modified":1673424447959},{"_id":"public/img/iframe1.png","hash":"f540e571ccf9b6e5c396939e96ed2faee3b34065","modified":1673424447959},{"_id":"public/img/muation.png","hash":"626935ff4a5e475b65256b2bf1e9870e6ee1b607","modified":1673424447959},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1673424447959},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1673424447959},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1673424447959},{"_id":"public/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1673424447959},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1673424447959},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1673424447959},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1673424447959},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1673424447959},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1673424447959},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1673424447959},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1673424447959},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1673424447959},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1673424447959},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1673424447959},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1673424447959},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1673424447959},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1673424447959},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1673424447959},{"_id":"public/medias/reward/wechat.png","hash":"51d93763de778bdea530b334202b4b1f5105f919","modified":1673425826759},{"_id":"public/medias/reward/alipay.jpg","hash":"cfc58f191f9efc70b3c1200d4599b266cd69f3d3","modified":1673425826759},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1673424447959},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1673424447959},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1673424447959},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1673424447959},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1673424447959},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1673424447959},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1673424447959},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1673424447959},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1673424447959},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1673424447959},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1673424447959},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1673424447959},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1673424447959},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1673424447959},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1673424447959},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1673424447959},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1673424447959},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1673424447959},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1673424447959},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1673424447959},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1673424447959},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1673424447959},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1673424447959},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1673424447959},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1673424447959},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1673424447959},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1673424447959},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1673424447959},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1673424447959},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1673424447959},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1673424447959},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1673424447959},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1673424447959},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1673424447959},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1673424447959},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1673424447959},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1673424447959},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1673424447959},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1673424447959},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1673424447959},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1673424447959},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1673424447959},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1673424447959},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1673424447959},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1673424447959},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1673424447959},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1673424447959},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1673424447959},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1673424447959},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1673424447959},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1673424447959},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1673424447959},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1673424447959},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1673424447959},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1673424447959},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1673424447959},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1673424447959},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1673424447959},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1673424447959},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1673424447959},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1673424447959},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1673424447959},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1673424447959},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1673424447959},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1673424447959},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1673424447959},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1673424447959},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1673424447959},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1673424447959},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1673424447959},{"_id":"public/img/shuiyin2.png","hash":"e3f6e85b136229ff5b836e41e4be9a70ce626117","modified":1673424447959},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1673424447959},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1673424447959},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1673424447959},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1673424447959},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1673424447959},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1673424447959},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1673424447959},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1673424447959},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1673424447959},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1673424447959},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1673424447959},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1673424447959},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1673424447959},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1673424447959},{"_id":"themes/matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1671984763000},{"_id":"themes/matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1671984763000},{"_id":"themes/matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1671984763000},{"_id":"themes/matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1671984763000},{"_id":"themes/matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1671984763000},{"_id":"themes/matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1671984763000},{"_id":"themes/matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1671984763000},{"_id":"themes/matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1671984763000},{"_id":"themes/matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1671984763000},{"_id":"themes/matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1671984763000},{"_id":"themes/matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1671984763000},{"_id":"themes/matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1671984763000},{"_id":"themes/matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1671984763000},{"_id":"themes/matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1671984763000},{"_id":"themes/matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1671984763000},{"_id":"themes/matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1671984763000},{"_id":"themes/matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1671984763000},{"_id":"themes/matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1671984763000},{"_id":"themes/matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1671984763000},{"_id":"themes/matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1671984763000},{"_id":"themes/matery/source/css/indexcover.css","hash":"e4a478c91cd6750a9f18b65b914ff0b316fb08b3","modified":1671984763000},{"_id":"themes/matery/source/css/dark.css","hash":"0dcd292d10f27f11c18d1a1a461b7e0cfe6c55cf","modified":1671984763000},{"_id":"themes/matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1671984763000},{"_id":"themes/matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1671984763000},{"_id":"themes/matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1671984763000},{"_id":"themes/matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1671984763000},{"_id":"themes/matery/source/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1671984763000},{"_id":"themes/matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1671984763000},{"_id":"themes/matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1671984763000},{"_id":"themes/matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1671984763000},{"_id":"themes/matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1671984763000},{"_id":"themes/matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1671984763000},{"_id":"themes/matery/source/.DS_Store","hash":"9755cd394301f0993283849ed449e2de201d028c","modified":1673425646572},{"_id":"themes/matery/source/medias/.DS_Store","hash":"0d29471391435607abf9802d2e7d656f2f8aa511","modified":1673425646571},{"_id":"themes/matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1671984763000},{"_id":"themes/matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1671984763000},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1671984763000},{"_id":"themes/matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1671984763000},{"_id":"themes/matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1671984763000},{"_id":"themes/matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1671984763000},{"_id":"themes/matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1671984763000},{"_id":"themes/matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1671984763000},{"_id":"themes/matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1671984763000},{"_id":"themes/matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1671984763000},{"_id":"themes/matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1671984763000},{"_id":"themes/matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1671984763000},{"_id":"themes/matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1671984763000},{"_id":"themes/matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1671984763000},{"_id":"themes/matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1671984763000},{"_id":"themes/matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1671984763000},{"_id":"themes/matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1671984763000},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1671984763000},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1671984763000},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1671984763000},{"_id":"themes/matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1671984763000},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1671984763000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1671984763000},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1671984763000},{"_id":"themes/matery/source/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1671984763000},{"_id":"themes/matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1671984763000},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1671984763000},{"_id":"themes/matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1671984763000},{"_id":"themes/matery/.DS_Store","hash":"1e7f3f66277c1a691a36310430277540ecddd744","modified":1673425641294},{"_id":"themes/matery/source/medias/reward/.DS_Store","hash":"2ea6408d00cc01c8c7fae01352b9c278a7a88cfd","modified":1673425658696},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1673425826759},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1673425826759},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1673425826759},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1673425826759},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1673425826759},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1673425826759},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1673425826759},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1673425826759},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1673425826759},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1673425826759},{"_id":"public/css/indexcover.css","hash":"4dea2c489452c3efe70fa91a6a7678da64d895da","modified":1673425826759},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1673425826759},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1673425826759},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1673425826759},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1673425826759},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1673425826759},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1673425826759},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1673425826759},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1673425826759},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1673425826759},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1673425826759},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1673425826759},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1673425826759},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1673425826759},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1673425826759},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1673425826759},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1673425826759},{"_id":"public/css/dark.css","hash":"0dcd292d10f27f11c18d1a1a461b7e0cfe6c55cf","modified":1673425826759},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1673425826759},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1673425826759},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1673425826759},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1673425826759},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1673425826759},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1673425826759},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1673425826759},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1673425826759},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1673425826759},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1673425826759},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1673425826759},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1673425826759},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1673425826759},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1673425826759}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"数据没有 只能重新搞一份","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: 数据没有 只能重新搞一份\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-01-11T06:34:35.049Z","updated":"2023-01-11T07:22:53.909Z","_id":"clcrafpy900005lq3hgi81kpa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"CSS3新特性","date":"2023-01-11T06:58:08.000Z","_content":"### [](#CSS3的新特性大致分为以下六类 \"CSS3的新特性大致分为以下六类\")CSS3的新特性大致分为以下六类\n\n# [](#1-CSS3选择器 \"1.CSS3选择器\")1.CSS3选择器\n\n基本选择器，属性选择器，伪类选择器，nth选择器\n\n# [](#2-CSS3边框与圆角 \"2.CSS3边框与圆角\")2.CSS3边框与圆角\n\n1.CSS3圆角border-radius\n\n```auto\n定义：可以为元素添加圆角边框（块元素，行内块元素，行内元素）\n```\n\n属性：  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top-left-radius 左上角</span><br><span class=\"line\">border-top-right-radius 右上角</span><br><span class=\"line\">border-bottom-right-radius 右下角</span><br><span class=\"line\">border-bottom-left-radius 左下角</span><br></pre></td></tr></tbody></table>\n\n复合属性：border-radius：  \n属性值\n\n四个值：左上角 右上角 右下角 左下角  \n三个值：左上角 右上角和左下角 右下角  \n两个值：左上角和右下角 右上角和左下角  \n一个值：4个角都生效\n\nborder-radius中的属性值由两个参数值构成: value1 / value2，值之间用/分隔，value1代表圆角的水平半径，value2代表圆角的垂直半径。\n\n2.盒阴影box-shadow\n\n```auto\n定义：可以控制一个或多个下拉阴影的框\n\n语法：box-shadow: 水平方向的偏移量 垂直方向的偏移量 模糊程度 扩展程度 颜色 是否具有内阴影\n```\n\n# [](#3-CSS3背景与渐变 \"3.CSS3背景与渐变\")3.CSS3背景与渐变\n\n1.CSS3背景\n\nbackground-image  \n语法：  \nbackgroundimage:url(‘1.jpg),url(‘2.jpg’)  \n使用逗号把图片分开  \n注意：元素引入多个背景图片，前面图片会覆盖后面的图片  \nbackground-cilp  \n定义：指定背景的绘制区域（裁剪）  \n语法：  \nbackground-cilp：border-box / padding-box / content-box  \n属性介绍：  \nborder-box：背景被裁剪到边框盒（从边框开始绘制背景图片）—默认  \npadding-box：背景被裁剪到内边距框（从内边距开始绘制背景图片）  \ncontent-box：背景被裁剪到内容框  \nbackground-origin  \n定义：设置背景图像的原始起始位置  \n语法：  \nbackground-origin：border-box / padding-box / content-box(背景图片坐标原点与这三个有关系)  \n属性的介绍：  \nborder-box：相对于边框来定位  \npadding-box：相对于内边距来定位  \ncontent-box：相对于内容框来定位  \n另外有一个需要了解  \nbackground-position:定义背景图片的位置，水平与垂直方向上面的偏移量(参考点)  \nbackground-repeat  \n定义：设置是否及如何重复背景图像，默认地，背景图像在水平和垂直方向上重复。\n\n属性值：  \nrepeat 默认。背景图像将在垂直方向和水平方向重复。  \nrepeat-x 背景图像将在水平方向重复。  \nrepeat-y 背景图像将在垂直方向重复。  \nno-repeat 背景图像将仅显示一次。  \ninherit 规定应该从父元素继承 background-repeat 属性的设置\n\nbackground-size  \n定义：指定背景图像的大小  \n语法：  \nbackground-size：number / % / cover / contain  \n属性介绍：  \nnumber: 宽度 高度（如果只写一个数值，第二个数值默认auto）  \n百分比： 0% - 100% 之间的任何值，此时的百分比参照于元素div的大小  \ncover：将背景图片等比缩放以填满整个容器（最远边），如果高度达到一定比例100%，宽度多出的会溢出，但是，具体那部分溢出取决于定位  \ncontain：将背景图片等比缩放至某一边紧贴容器边缘为止（最近边），如果图片高度比较小，高度就会有空白区域出现  \n复合属性background  \n定义：可以在一个声明中设置所有的背景属性  \n语法：  \nbackground：color position size repeat origin clip attachment image; background: #abc center 50% no-repeat content-box content-box fixed url(‘1.jpg’) ,url(‘2.jpg’)…\n\n2.CSS3渐变\n\n定义：可以在两个或者多个指定颜色之间显示平移的过渡\n\n线性渐变  \n定义：是沿着一根轴线改变颜色，从起点到终点进行顺序渐变（从一边拉向另一边）  \n语法：background:linear-gradient(方向，开始颜色，结束颜色)\n\n方向介绍：\n\n1.方向从上到下（默认）  \nbackground: linear-gradient(red,blue);  \n2.方向从左到右  \nbackground: linear-gradient(to right,red,blue);  \n3.对角  \nbackground: linear-gradient(to right bottom,red,blue);  \n4.角度(单位deg)  \nbackground: linear-gradient(角度,red,blue);  \n角度说明：0deg 将创建一个从下到上的渐变，90deg将创建一个从左到右的渐变\n\n颜色结点：默认每个颜色均匀分布\n\nbackground: linear-gradient(red 10%,blue 20%,green 30%,yellow 40%);  \n从0%到10%，为红色，从10%到20%为红色到蓝色的渐变，从20%到30%为蓝色到绿色的渐变，从30%到40%，为绿色到黄色的渐变,从40%到100%为黄色  \nbackground: linear-gradient(red 10%,blue);  \n从0%到10%，为红色，从10%到100%为红色到蓝色的渐变  \n最后如果不写具体数值，默认到100%  \nbackground: linear-gradient(red,blue 30%);  \n从0%到30%，为红色到蓝色的渐变  \n如果第一个不写，默认数值是 0%  \nbackground:lineargradient(rgba(255,0,0,0),rgba(255,0,0,1));  \n由透明色变为不透明色\n\n重复渐变\n\n示例：background: repeating-linear-gradient(90deg,red 0%,blue 20%);或者 background: repeating-linear-gradient(90deg,red 0%,blue 10%,red 20%);  \n注意：把元素的整体宽度看成100%\n\n径向渐变  \n定义：从起点到终点，颜色从内向外进行圆形渐变  \n语法：background:radial-gradient(形状尺寸，开始颜色，结束颜色)  \n形状分类：  \ncircle — 圆形  \nellipse — 椭圆形  \n注意：当元素的高和宽一样时，参数无论设置哪个，都是圆形\n\n尺寸大小：  \nclosest-side最近边  \nbackground: radial-gradient(closest-side circle,red , blue);  \nfarthest-side 最远边  \nbackground: radial-gradient(farthest-side circle,red , blue);  \nclosest-corner最近角  \nbackground: radial-gradient(closest-corner circle,red , blue);  \nfarthest-corner最远角  \nbackground: radial-gradient(farthest-corner circle,red , blue);\n\n颜色结点：  \n例：  \nbackground:radial-gradient(circle,red 50% ,blue 70%);  \n注意：此时的百分比,指的是圆心到元素最远端的距离（角度）\n\n重复渐变 ：  \n示例： background: repeating-radial-gradient(red 0%,blue 20%);  \nbackground: repeating-radial-gradient(red 0%,blue 10%,red 20%);\n\n# [](#4-CSS3动画 \"4.CSS3动画\")4.CSS3动画","source":"_posts/CSS3新特性.md","raw":"---\ntitle: CSS3新特性\ndate: 2023-01-11 14:58:08\ntags:\n---\n### [](#CSS3的新特性大致分为以下六类 \"CSS3的新特性大致分为以下六类\")CSS3的新特性大致分为以下六类\n\n# [](#1-CSS3选择器 \"1.CSS3选择器\")1.CSS3选择器\n\n基本选择器，属性选择器，伪类选择器，nth选择器\n\n# [](#2-CSS3边框与圆角 \"2.CSS3边框与圆角\")2.CSS3边框与圆角\n\n1.CSS3圆角border-radius\n\n```auto\n定义：可以为元素添加圆角边框（块元素，行内块元素，行内元素）\n```\n\n属性：  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top-left-radius 左上角</span><br><span class=\"line\">border-top-right-radius 右上角</span><br><span class=\"line\">border-bottom-right-radius 右下角</span><br><span class=\"line\">border-bottom-left-radius 左下角</span><br></pre></td></tr></tbody></table>\n\n复合属性：border-radius：  \n属性值\n\n四个值：左上角 右上角 右下角 左下角  \n三个值：左上角 右上角和左下角 右下角  \n两个值：左上角和右下角 右上角和左下角  \n一个值：4个角都生效\n\nborder-radius中的属性值由两个参数值构成: value1 / value2，值之间用/分隔，value1代表圆角的水平半径，value2代表圆角的垂直半径。\n\n2.盒阴影box-shadow\n\n```auto\n定义：可以控制一个或多个下拉阴影的框\n\n语法：box-shadow: 水平方向的偏移量 垂直方向的偏移量 模糊程度 扩展程度 颜色 是否具有内阴影\n```\n\n# [](#3-CSS3背景与渐变 \"3.CSS3背景与渐变\")3.CSS3背景与渐变\n\n1.CSS3背景\n\nbackground-image  \n语法：  \nbackgroundimage:url(‘1.jpg),url(‘2.jpg’)  \n使用逗号把图片分开  \n注意：元素引入多个背景图片，前面图片会覆盖后面的图片  \nbackground-cilp  \n定义：指定背景的绘制区域（裁剪）  \n语法：  \nbackground-cilp：border-box / padding-box / content-box  \n属性介绍：  \nborder-box：背景被裁剪到边框盒（从边框开始绘制背景图片）—默认  \npadding-box：背景被裁剪到内边距框（从内边距开始绘制背景图片）  \ncontent-box：背景被裁剪到内容框  \nbackground-origin  \n定义：设置背景图像的原始起始位置  \n语法：  \nbackground-origin：border-box / padding-box / content-box(背景图片坐标原点与这三个有关系)  \n属性的介绍：  \nborder-box：相对于边框来定位  \npadding-box：相对于内边距来定位  \ncontent-box：相对于内容框来定位  \n另外有一个需要了解  \nbackground-position:定义背景图片的位置，水平与垂直方向上面的偏移量(参考点)  \nbackground-repeat  \n定义：设置是否及如何重复背景图像，默认地，背景图像在水平和垂直方向上重复。\n\n属性值：  \nrepeat 默认。背景图像将在垂直方向和水平方向重复。  \nrepeat-x 背景图像将在水平方向重复。  \nrepeat-y 背景图像将在垂直方向重复。  \nno-repeat 背景图像将仅显示一次。  \ninherit 规定应该从父元素继承 background-repeat 属性的设置\n\nbackground-size  \n定义：指定背景图像的大小  \n语法：  \nbackground-size：number / % / cover / contain  \n属性介绍：  \nnumber: 宽度 高度（如果只写一个数值，第二个数值默认auto）  \n百分比： 0% - 100% 之间的任何值，此时的百分比参照于元素div的大小  \ncover：将背景图片等比缩放以填满整个容器（最远边），如果高度达到一定比例100%，宽度多出的会溢出，但是，具体那部分溢出取决于定位  \ncontain：将背景图片等比缩放至某一边紧贴容器边缘为止（最近边），如果图片高度比较小，高度就会有空白区域出现  \n复合属性background  \n定义：可以在一个声明中设置所有的背景属性  \n语法：  \nbackground：color position size repeat origin clip attachment image; background: #abc center 50% no-repeat content-box content-box fixed url(‘1.jpg’) ,url(‘2.jpg’)…\n\n2.CSS3渐变\n\n定义：可以在两个或者多个指定颜色之间显示平移的过渡\n\n线性渐变  \n定义：是沿着一根轴线改变颜色，从起点到终点进行顺序渐变（从一边拉向另一边）  \n语法：background:linear-gradient(方向，开始颜色，结束颜色)\n\n方向介绍：\n\n1.方向从上到下（默认）  \nbackground: linear-gradient(red,blue);  \n2.方向从左到右  \nbackground: linear-gradient(to right,red,blue);  \n3.对角  \nbackground: linear-gradient(to right bottom,red,blue);  \n4.角度(单位deg)  \nbackground: linear-gradient(角度,red,blue);  \n角度说明：0deg 将创建一个从下到上的渐变，90deg将创建一个从左到右的渐变\n\n颜色结点：默认每个颜色均匀分布\n\nbackground: linear-gradient(red 10%,blue 20%,green 30%,yellow 40%);  \n从0%到10%，为红色，从10%到20%为红色到蓝色的渐变，从20%到30%为蓝色到绿色的渐变，从30%到40%，为绿色到黄色的渐变,从40%到100%为黄色  \nbackground: linear-gradient(red 10%,blue);  \n从0%到10%，为红色，从10%到100%为红色到蓝色的渐变  \n最后如果不写具体数值，默认到100%  \nbackground: linear-gradient(red,blue 30%);  \n从0%到30%，为红色到蓝色的渐变  \n如果第一个不写，默认数值是 0%  \nbackground:lineargradient(rgba(255,0,0,0),rgba(255,0,0,1));  \n由透明色变为不透明色\n\n重复渐变\n\n示例：background: repeating-linear-gradient(90deg,red 0%,blue 20%);或者 background: repeating-linear-gradient(90deg,red 0%,blue 10%,red 20%);  \n注意：把元素的整体宽度看成100%\n\n径向渐变  \n定义：从起点到终点，颜色从内向外进行圆形渐变  \n语法：background:radial-gradient(形状尺寸，开始颜色，结束颜色)  \n形状分类：  \ncircle — 圆形  \nellipse — 椭圆形  \n注意：当元素的高和宽一样时，参数无论设置哪个，都是圆形\n\n尺寸大小：  \nclosest-side最近边  \nbackground: radial-gradient(closest-side circle,red , blue);  \nfarthest-side 最远边  \nbackground: radial-gradient(farthest-side circle,red , blue);  \nclosest-corner最近角  \nbackground: radial-gradient(closest-corner circle,red , blue);  \nfarthest-corner最远角  \nbackground: radial-gradient(farthest-corner circle,red , blue);\n\n颜色结点：  \n例：  \nbackground:radial-gradient(circle,red 50% ,blue 70%);  \n注意：此时的百分比,指的是圆心到元素最远端的距离（角度）\n\n重复渐变 ：  \n示例： background: repeating-radial-gradient(red 0%,blue 20%);  \nbackground: repeating-radial-gradient(red 0%,blue 10%,red 20%);\n\n# [](#4-CSS3动画 \"4.CSS3动画\")4.CSS3动画","slug":"CSS3新特性","published":1,"updated":"2023-01-11T06:58:30.064Z","_id":"clcrb8el1000096q320ol46ix","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"CSS3的新特性大致分为以下六类\"><a href=\"#CSS3的新特性大致分为以下六类\" class=\"headerlink\" title=\"CSS3的新特性大致分为以下六类\"></a><a href=\"#CSS3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E5%A4%A7%E8%87%B4%E5%88%86%E4%B8%BA%E4%BB%A5%E4%B8%8B%E5%85%AD%E7%B1%BB\" title=\"CSS3的新特性大致分为以下六类\"></a>CSS3的新特性大致分为以下六类</h3><h1 id=\"1-CSS3选择器\"><a href=\"#1-CSS3选择器\" class=\"headerlink\" title=\"1.CSS3选择器\"></a><a href=\"#1-CSS3%E9%80%89%E6%8B%A9%E5%99%A8\" title=\"1.CSS3选择器\"></a>1.CSS3选择器</h1><p>基本选择器，属性选择器，伪类选择器，nth选择器</p>\n<h1 id=\"2-CSS3边框与圆角\"><a href=\"#2-CSS3边框与圆角\" class=\"headerlink\" title=\"2.CSS3边框与圆角\"></a><a href=\"#2-CSS3%E8%BE%B9%E6%A1%86%E4%B8%8E%E5%9C%86%E8%A7%92\" title=\"2.CSS3边框与圆角\"></a>2.CSS3边框与圆角</h1><p>1.CSS3圆角border-radius</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：可以为元素添加圆角边框（块元素，行内块元素，行内元素）</span><br></pre></td></tr></table></figure>\n\n<p>属性：  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top-left-radius 左上角</span><br><span class=\"line\">border-top-right-radius 右上角</span><br><span class=\"line\">border-bottom-right-radius 右下角</span><br><span class=\"line\">border-bottom-left-radius 左下角</span><br></pre></td></tr></tbody></table>\n\n<p>复合属性：border-radius：<br>属性值</p>\n<p>四个值：左上角 右上角 右下角 左下角<br>三个值：左上角 右上角和左下角 右下角<br>两个值：左上角和右下角 右上角和左下角<br>一个值：4个角都生效</p>\n<p>border-radius中的属性值由两个参数值构成: value1 &#x2F; value2，值之间用&#x2F;分隔，value1代表圆角的水平半径，value2代表圆角的垂直半径。</p>\n<p>2.盒阴影box-shadow</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：可以控制一个或多个下拉阴影的框</span><br><span class=\"line\"></span><br><span class=\"line\">语法：box-shadow: 水平方向的偏移量 垂直方向的偏移量 模糊程度 扩展程度 颜色 是否具有内阴影</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-CSS3背景与渐变\"><a href=\"#3-CSS3背景与渐变\" class=\"headerlink\" title=\"3.CSS3背景与渐变\"></a><a href=\"#3-CSS3%E8%83%8C%E6%99%AF%E4%B8%8E%E6%B8%90%E5%8F%98\" title=\"3.CSS3背景与渐变\"></a>3.CSS3背景与渐变</h1><p>1.CSS3背景</p>\n<p>background-image<br>语法：<br>backgroundimage:url(‘1.jpg),url(‘2.jpg’)<br>使用逗号把图片分开<br>注意：元素引入多个背景图片，前面图片会覆盖后面的图片<br>background-cilp<br>定义：指定背景的绘制区域（裁剪）<br>语法：<br>background-cilp：border-box &#x2F; padding-box &#x2F; content-box<br>属性介绍：<br>border-box：背景被裁剪到边框盒（从边框开始绘制背景图片）—默认<br>padding-box：背景被裁剪到内边距框（从内边距开始绘制背景图片）<br>content-box：背景被裁剪到内容框<br>background-origin<br>定义：设置背景图像的原始起始位置<br>语法：<br>background-origin：border-box &#x2F; padding-box &#x2F; content-box(背景图片坐标原点与这三个有关系)<br>属性的介绍：<br>border-box：相对于边框来定位<br>padding-box：相对于内边距来定位<br>content-box：相对于内容框来定位<br>另外有一个需要了解<br>background-position:定义背景图片的位置，水平与垂直方向上面的偏移量(参考点)<br>background-repeat<br>定义：设置是否及如何重复背景图像，默认地，背景图像在水平和垂直方向上重复。</p>\n<p>属性值：<br>repeat 默认。背景图像将在垂直方向和水平方向重复。<br>repeat-x 背景图像将在水平方向重复。<br>repeat-y 背景图像将在垂直方向重复。<br>no-repeat 背景图像将仅显示一次。<br>inherit 规定应该从父元素继承 background-repeat 属性的设置</p>\n<p>background-size<br>定义：指定背景图像的大小<br>语法：<br>background-size：number &#x2F; % &#x2F; cover &#x2F; contain<br>属性介绍：<br>number: 宽度 高度（如果只写一个数值，第二个数值默认auto）<br>百分比： 0% - 100% 之间的任何值，此时的百分比参照于元素div的大小<br>cover：将背景图片等比缩放以填满整个容器（最远边），如果高度达到一定比例100%，宽度多出的会溢出，但是，具体那部分溢出取决于定位<br>contain：将背景图片等比缩放至某一边紧贴容器边缘为止（最近边），如果图片高度比较小，高度就会有空白区域出现<br>复合属性background<br>定义：可以在一个声明中设置所有的背景属性<br>语法：<br>background：color position size repeat origin clip attachment image; background: #abc center 50% no-repeat content-box content-box fixed url(‘1.jpg’) ,url(‘2.jpg’)…</p>\n<p>2.CSS3渐变</p>\n<p>定义：可以在两个或者多个指定颜色之间显示平移的过渡</p>\n<p>线性渐变<br>定义：是沿着一根轴线改变颜色，从起点到终点进行顺序渐变（从一边拉向另一边）<br>语法：background:linear-gradient(方向，开始颜色，结束颜色)</p>\n<p>方向介绍：</p>\n<p>1.方向从上到下（默认）<br>background: linear-gradient(red,blue);<br>2.方向从左到右<br>background: linear-gradient(to right,red,blue);<br>3.对角<br>background: linear-gradient(to right bottom,red,blue);<br>4.角度(单位deg)<br>background: linear-gradient(角度,red,blue);<br>角度说明：0deg 将创建一个从下到上的渐变，90deg将创建一个从左到右的渐变</p>\n<p>颜色结点：默认每个颜色均匀分布</p>\n<p>background: linear-gradient(red 10%,blue 20%,green 30%,yellow 40%);<br>从0%到10%，为红色，从10%到20%为红色到蓝色的渐变，从20%到30%为蓝色到绿色的渐变，从30%到40%，为绿色到黄色的渐变,从40%到100%为黄色<br>background: linear-gradient(red 10%,blue);<br>从0%到10%，为红色，从10%到100%为红色到蓝色的渐变<br>最后如果不写具体数值，默认到100%<br>background: linear-gradient(red,blue 30%);<br>从0%到30%，为红色到蓝色的渐变<br>如果第一个不写，默认数值是 0%<br>background:lineargradient(rgba(255,0,0,0),rgba(255,0,0,1));<br>由透明色变为不透明色</p>\n<p>重复渐变</p>\n<p>示例：background: repeating-linear-gradient(90deg,red 0%,blue 20%);或者 background: repeating-linear-gradient(90deg,red 0%,blue 10%,red 20%);<br>注意：把元素的整体宽度看成100%</p>\n<p>径向渐变<br>定义：从起点到终点，颜色从内向外进行圆形渐变<br>语法：background:radial-gradient(形状尺寸，开始颜色，结束颜色)<br>形状分类：<br>circle — 圆形<br>ellipse — 椭圆形<br>注意：当元素的高和宽一样时，参数无论设置哪个，都是圆形</p>\n<p>尺寸大小：<br>closest-side最近边<br>background: radial-gradient(closest-side circle,red , blue);<br>farthest-side 最远边<br>background: radial-gradient(farthest-side circle,red , blue);<br>closest-corner最近角<br>background: radial-gradient(closest-corner circle,red , blue);<br>farthest-corner最远角<br>background: radial-gradient(farthest-corner circle,red , blue);</p>\n<p>颜色结点：<br>例：<br>background:radial-gradient(circle,red 50% ,blue 70%);<br>注意：此时的百分比,指的是圆心到元素最远端的距离（角度）</p>\n<p>重复渐变 ：<br>示例： background: repeating-radial-gradient(red 0%,blue 20%);<br>background: repeating-radial-gradient(red 0%,blue 10%,red 20%);</p>\n<h1 id=\"4-CSS3动画\"><a href=\"#4-CSS3动画\" class=\"headerlink\" title=\"4.CSS3动画\"></a><a href=\"#4-CSS3%E5%8A%A8%E7%94%BB\" title=\"4.CSS3动画\"></a>4.CSS3动画</h1>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CSS3的新特性大致分为以下六类\"><a href=\"#CSS3的新特性大致分为以下六类\" class=\"headerlink\" title=\"CSS3的新特性大致分为以下六类\"></a><a href=\"#CSS3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E5%A4%A7%E8%87%B4%E5%88%86%E4%B8%BA%E4%BB%A5%E4%B8%8B%E5%85%AD%E7%B1%BB\" title=\"CSS3的新特性大致分为以下六类\"></a>CSS3的新特性大致分为以下六类</h3><h1 id=\"1-CSS3选择器\"><a href=\"#1-CSS3选择器\" class=\"headerlink\" title=\"1.CSS3选择器\"></a><a href=\"#1-CSS3%E9%80%89%E6%8B%A9%E5%99%A8\" title=\"1.CSS3选择器\"></a>1.CSS3选择器</h1><p>基本选择器，属性选择器，伪类选择器，nth选择器</p>\n<h1 id=\"2-CSS3边框与圆角\"><a href=\"#2-CSS3边框与圆角\" class=\"headerlink\" title=\"2.CSS3边框与圆角\"></a><a href=\"#2-CSS3%E8%BE%B9%E6%A1%86%E4%B8%8E%E5%9C%86%E8%A7%92\" title=\"2.CSS3边框与圆角\"></a>2.CSS3边框与圆角</h1><p>1.CSS3圆角border-radius</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：可以为元素添加圆角边框（块元素，行内块元素，行内元素）</span><br></pre></td></tr></table></figure>\n\n<p>属性：  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border-top-left-radius 左上角</span><br><span class=\"line\">border-top-right-radius 右上角</span><br><span class=\"line\">border-bottom-right-radius 右下角</span><br><span class=\"line\">border-bottom-left-radius 左下角</span><br></pre></td></tr></tbody></table>\n\n<p>复合属性：border-radius：<br>属性值</p>\n<p>四个值：左上角 右上角 右下角 左下角<br>三个值：左上角 右上角和左下角 右下角<br>两个值：左上角和右下角 右上角和左下角<br>一个值：4个角都生效</p>\n<p>border-radius中的属性值由两个参数值构成: value1 &#x2F; value2，值之间用&#x2F;分隔，value1代表圆角的水平半径，value2代表圆角的垂直半径。</p>\n<p>2.盒阴影box-shadow</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义：可以控制一个或多个下拉阴影的框</span><br><span class=\"line\"></span><br><span class=\"line\">语法：box-shadow: 水平方向的偏移量 垂直方向的偏移量 模糊程度 扩展程度 颜色 是否具有内阴影</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-CSS3背景与渐变\"><a href=\"#3-CSS3背景与渐变\" class=\"headerlink\" title=\"3.CSS3背景与渐变\"></a><a href=\"#3-CSS3%E8%83%8C%E6%99%AF%E4%B8%8E%E6%B8%90%E5%8F%98\" title=\"3.CSS3背景与渐变\"></a>3.CSS3背景与渐变</h1><p>1.CSS3背景</p>\n<p>background-image<br>语法：<br>backgroundimage:url(‘1.jpg),url(‘2.jpg’)<br>使用逗号把图片分开<br>注意：元素引入多个背景图片，前面图片会覆盖后面的图片<br>background-cilp<br>定义：指定背景的绘制区域（裁剪）<br>语法：<br>background-cilp：border-box &#x2F; padding-box &#x2F; content-box<br>属性介绍：<br>border-box：背景被裁剪到边框盒（从边框开始绘制背景图片）—默认<br>padding-box：背景被裁剪到内边距框（从内边距开始绘制背景图片）<br>content-box：背景被裁剪到内容框<br>background-origin<br>定义：设置背景图像的原始起始位置<br>语法：<br>background-origin：border-box &#x2F; padding-box &#x2F; content-box(背景图片坐标原点与这三个有关系)<br>属性的介绍：<br>border-box：相对于边框来定位<br>padding-box：相对于内边距来定位<br>content-box：相对于内容框来定位<br>另外有一个需要了解<br>background-position:定义背景图片的位置，水平与垂直方向上面的偏移量(参考点)<br>background-repeat<br>定义：设置是否及如何重复背景图像，默认地，背景图像在水平和垂直方向上重复。</p>\n<p>属性值：<br>repeat 默认。背景图像将在垂直方向和水平方向重复。<br>repeat-x 背景图像将在水平方向重复。<br>repeat-y 背景图像将在垂直方向重复。<br>no-repeat 背景图像将仅显示一次。<br>inherit 规定应该从父元素继承 background-repeat 属性的设置</p>\n<p>background-size<br>定义：指定背景图像的大小<br>语法：<br>background-size：number &#x2F; % &#x2F; cover &#x2F; contain<br>属性介绍：<br>number: 宽度 高度（如果只写一个数值，第二个数值默认auto）<br>百分比： 0% - 100% 之间的任何值，此时的百分比参照于元素div的大小<br>cover：将背景图片等比缩放以填满整个容器（最远边），如果高度达到一定比例100%，宽度多出的会溢出，但是，具体那部分溢出取决于定位<br>contain：将背景图片等比缩放至某一边紧贴容器边缘为止（最近边），如果图片高度比较小，高度就会有空白区域出现<br>复合属性background<br>定义：可以在一个声明中设置所有的背景属性<br>语法：<br>background：color position size repeat origin clip attachment image; background: #abc center 50% no-repeat content-box content-box fixed url(‘1.jpg’) ,url(‘2.jpg’)…</p>\n<p>2.CSS3渐变</p>\n<p>定义：可以在两个或者多个指定颜色之间显示平移的过渡</p>\n<p>线性渐变<br>定义：是沿着一根轴线改变颜色，从起点到终点进行顺序渐变（从一边拉向另一边）<br>语法：background:linear-gradient(方向，开始颜色，结束颜色)</p>\n<p>方向介绍：</p>\n<p>1.方向从上到下（默认）<br>background: linear-gradient(red,blue);<br>2.方向从左到右<br>background: linear-gradient(to right,red,blue);<br>3.对角<br>background: linear-gradient(to right bottom,red,blue);<br>4.角度(单位deg)<br>background: linear-gradient(角度,red,blue);<br>角度说明：0deg 将创建一个从下到上的渐变，90deg将创建一个从左到右的渐变</p>\n<p>颜色结点：默认每个颜色均匀分布</p>\n<p>background: linear-gradient(red 10%,blue 20%,green 30%,yellow 40%);<br>从0%到10%，为红色，从10%到20%为红色到蓝色的渐变，从20%到30%为蓝色到绿色的渐变，从30%到40%，为绿色到黄色的渐变,从40%到100%为黄色<br>background: linear-gradient(red 10%,blue);<br>从0%到10%，为红色，从10%到100%为红色到蓝色的渐变<br>最后如果不写具体数值，默认到100%<br>background: linear-gradient(red,blue 30%);<br>从0%到30%，为红色到蓝色的渐变<br>如果第一个不写，默认数值是 0%<br>background:lineargradient(rgba(255,0,0,0),rgba(255,0,0,1));<br>由透明色变为不透明色</p>\n<p>重复渐变</p>\n<p>示例：background: repeating-linear-gradient(90deg,red 0%,blue 20%);或者 background: repeating-linear-gradient(90deg,red 0%,blue 10%,red 20%);<br>注意：把元素的整体宽度看成100%</p>\n<p>径向渐变<br>定义：从起点到终点，颜色从内向外进行圆形渐变<br>语法：background:radial-gradient(形状尺寸，开始颜色，结束颜色)<br>形状分类：<br>circle — 圆形<br>ellipse — 椭圆形<br>注意：当元素的高和宽一样时，参数无论设置哪个，都是圆形</p>\n<p>尺寸大小：<br>closest-side最近边<br>background: radial-gradient(closest-side circle,red , blue);<br>farthest-side 最远边<br>background: radial-gradient(farthest-side circle,red , blue);<br>closest-corner最近角<br>background: radial-gradient(closest-corner circle,red , blue);<br>farthest-corner最远角<br>background: radial-gradient(farthest-corner circle,red , blue);</p>\n<p>颜色结点：<br>例：<br>background:radial-gradient(circle,red 50% ,blue 70%);<br>注意：此时的百分比,指的是圆心到元素最远端的距离（角度）</p>\n<p>重复渐变 ：<br>示例： background: repeating-radial-gradient(red 0%,blue 20%);<br>background: repeating-radial-gradient(red 0%,blue 10%,red 20%);</p>\n<h1 id=\"4-CSS3动画\"><a href=\"#4-CSS3动画\" class=\"headerlink\" title=\"4.CSS3动画\"></a><a href=\"#4-CSS3%E5%8A%A8%E7%94%BB\" title=\"4.CSS3动画\"></a>4.CSS3动画</h1>"},{"title":"js 变量","date":"2023-01-11T07:05:37.000Z","_content":"# [](#一、作用域 \"一、作用域\")一、作用域\n\n在 JavaScript 中, 作用域（scope，或译有效范围）就是变量和函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期\n\n## [](#全局-局部作用域 \"全局/局部作用域\")全局/局部作用域\n\n2.1 全局作用域(Global Scope)\n\n（1）不在任何函数内定义的变量就具有全局作用域。  \n（2）实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。  \n（3）window对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等。  \n![](/img/1.png)\n\n2.2 局部作用域(Local Scope)  \n（1）JavaScript的作用域是通过函数来定义的，在一个函数中定义的变量只对这个函数内部可见，称为函数（局部）作用域。\n\n## [](#全局-局部变量 \"全局/局部变量\")全局/局部变量\n\n3.1 全局变量\n\n（1）在函数定义外声明的变量是全局变量。\n\n（2）全局变量有 全局作用域，它的值可在整个程序中访问和修改。\n\n（3）如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。\n\n3.2 局部变量\n\n（1）在函数定义内声明的变量是局部变量。\n\n（2）因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。\n\n（3）每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。\n\n（4）函数外无法访问函数内的变量，函数内却可以访问函数外的变量。\n\n全局变量\n\n1、在函数定义外声明的变量是全局变量；全局变量有全局作用域，它的值可在整个程序中访问和修改。  \n![](/img/2.png)  \n2、如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。  \n![](/img/3.png)\n\n局部变量\n\n1、因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。  \n![](/img/5.png)\n\n2、每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。  \n![](/img/6.png)\n\n3、函数外无法访问函数内的变量，函数内却可以访问函数外的变量。(闭包)  \n![](/img/7.png)\n\n## [](#块级作用域 \"块级作用域\")块级作用域\n\n块级作用域指在If语句，switch语句，循环语句等语句块中定义变量，这意味着变量不能在语句块之外被访问。\n\n4 `var 不支持块级作用域`\n\n（1）在If等语句块中，定义的变量从属于该块所在的作用域，和函数不同，他们不会创建新的作用域。  \n![](/img/11.png)\n\n`let和const`\n\n（1）为了解决块级作用域，ES6引入了 let 和 const 关键字，可以声明一个块级作用域的变量。  \n![](/img/12.png)  \n（2）**\\***全局作用域的生存周期与上述应用相同。局部作用域只在该函数调用执行期间存在。**\\***\n\n## [](#七、上下文-vs-作用域 \"七、上下文 vs 作用域\")七、上下文 vs 作用域\n\n（1）首先需要说明的是上下文和作用域是不同的概念。\n\n（2）每个函数调用都有与之相关的作用域和上下文。从根本上说，作用域是基于函数，而上下文是基于对象。\n\n（3）作用域是和每次函数调用时变量的访问有关，并且每次调用都是独立的。上下文总是关键字 this 的值，是调用当前可执行代码的对象的引用。\n\n## [](#八、“this”-上下文 \"八、“this” 上下文\")八、“this” 上下文\n\n（1）上下文通常是取决于一个函数如何被调用。当函数作为对象的方法被调用时，this 指向调用方法的对象。  \n![](/img/13.png)\n\n（2）当调用一个函数时，通过 new 操作符创建一个对象的实例，当以这种方式调用时，this 指向新创建的实例。  \n![](/img/14.png)\n\n（3）当调用一个未绑定函数，this 默认指向全局上下文或者浏览器中的window对象。然而如果函数在严格模式下被执行(“use strict”)，this 默认指向 undefined。\n\n## [](#执行上下文 \"执行上下文\")执行上下文\n\n1）当函数执行时，会创建一个称为执行上下文的内部对象（可理解为作用域，不是前面讨论的上下文）。一个执行上下文定义了一个函数执行时的环境。\n\n（2）函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文。\n\n（3）当javascript代码文件被浏览器载入后，默认最先进入的是一个全局的执行上下文。当在全局上下文中调用执行一个函数时，程序流就进入该被调用函数内，此时引擎就会为该函数创建一个新的执行上下文，并且将其压入到执行栈顶部（作用域链）。浏览器总是执行位于执行栈顶部的当前执行上下文，一旦执行完毕，该执行上下文就会从执行栈顶部弹出，并且控制权将进入其下的执行上下文。这样，执行栈中的执行上下文就会被依次执行并且弹出，直到回到全局的执行上下文。\n\n十、作用域链\n\n（1）在JavaScript中，函数也是对象，对象中有些属性我们可以访问，但有些不可以（访问），这些属性仅供JavaScript引擎存取，\\[\\[scope\\]\\]就是其中一个。\n\n（2）\\[\\[scope\\]\\]指的就是我们所说的作用域，其中存储了执行上下文的集合。\n\n（3）\\[\\[scope\\]\\]中所存储的执行上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。  \n![](/img/15.png)\n\n（1）运行示例代码将会导致嵌套的函数被从上倒下执行，一直到 fourth 函数，此时作用域链从上到下为： fourth, third, second, first, global。\n\n（2）fourth 函数能够访问全局变量和任何定义在first,second和third函数中的变量（和访问自己的变量一样）。\n\n（3）一旦fourth函数执行完成，其就会从作用域链顶部移除，并且执行权会返回到third函数。这个过程一直持续到所有代码完成执行。","source":"_posts/js-变量.md","raw":"---\ntitle: js 变量\ndate: 2023-01-11 15:05:37\ntags:\n---\n# [](#一、作用域 \"一、作用域\")一、作用域\n\n在 JavaScript 中, 作用域（scope，或译有效范围）就是变量和函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期\n\n## [](#全局-局部作用域 \"全局/局部作用域\")全局/局部作用域\n\n2.1 全局作用域(Global Scope)\n\n（1）不在任何函数内定义的变量就具有全局作用域。  \n（2）实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。  \n（3）window对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等。  \n![](/img/1.png)\n\n2.2 局部作用域(Local Scope)  \n（1）JavaScript的作用域是通过函数来定义的，在一个函数中定义的变量只对这个函数内部可见，称为函数（局部）作用域。\n\n## [](#全局-局部变量 \"全局/局部变量\")全局/局部变量\n\n3.1 全局变量\n\n（1）在函数定义外声明的变量是全局变量。\n\n（2）全局变量有 全局作用域，它的值可在整个程序中访问和修改。\n\n（3）如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。\n\n3.2 局部变量\n\n（1）在函数定义内声明的变量是局部变量。\n\n（2）因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。\n\n（3）每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。\n\n（4）函数外无法访问函数内的变量，函数内却可以访问函数外的变量。\n\n全局变量\n\n1、在函数定义外声明的变量是全局变量；全局变量有全局作用域，它的值可在整个程序中访问和修改。  \n![](/img/2.png)  \n2、如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。  \n![](/img/3.png)\n\n局部变量\n\n1、因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。  \n![](/img/5.png)\n\n2、每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。  \n![](/img/6.png)\n\n3、函数外无法访问函数内的变量，函数内却可以访问函数外的变量。(闭包)  \n![](/img/7.png)\n\n## [](#块级作用域 \"块级作用域\")块级作用域\n\n块级作用域指在If语句，switch语句，循环语句等语句块中定义变量，这意味着变量不能在语句块之外被访问。\n\n4 `var 不支持块级作用域`\n\n（1）在If等语句块中，定义的变量从属于该块所在的作用域，和函数不同，他们不会创建新的作用域。  \n![](/img/11.png)\n\n`let和const`\n\n（1）为了解决块级作用域，ES6引入了 let 和 const 关键字，可以声明一个块级作用域的变量。  \n![](/img/12.png)  \n（2）**\\***全局作用域的生存周期与上述应用相同。局部作用域只在该函数调用执行期间存在。**\\***\n\n## [](#七、上下文-vs-作用域 \"七、上下文 vs 作用域\")七、上下文 vs 作用域\n\n（1）首先需要说明的是上下文和作用域是不同的概念。\n\n（2）每个函数调用都有与之相关的作用域和上下文。从根本上说，作用域是基于函数，而上下文是基于对象。\n\n（3）作用域是和每次函数调用时变量的访问有关，并且每次调用都是独立的。上下文总是关键字 this 的值，是调用当前可执行代码的对象的引用。\n\n## [](#八、“this”-上下文 \"八、“this” 上下文\")八、“this” 上下文\n\n（1）上下文通常是取决于一个函数如何被调用。当函数作为对象的方法被调用时，this 指向调用方法的对象。  \n![](/img/13.png)\n\n（2）当调用一个函数时，通过 new 操作符创建一个对象的实例，当以这种方式调用时，this 指向新创建的实例。  \n![](/img/14.png)\n\n（3）当调用一个未绑定函数，this 默认指向全局上下文或者浏览器中的window对象。然而如果函数在严格模式下被执行(“use strict”)，this 默认指向 undefined。\n\n## [](#执行上下文 \"执行上下文\")执行上下文\n\n1）当函数执行时，会创建一个称为执行上下文的内部对象（可理解为作用域，不是前面讨论的上下文）。一个执行上下文定义了一个函数执行时的环境。\n\n（2）函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文。\n\n（3）当javascript代码文件被浏览器载入后，默认最先进入的是一个全局的执行上下文。当在全局上下文中调用执行一个函数时，程序流就进入该被调用函数内，此时引擎就会为该函数创建一个新的执行上下文，并且将其压入到执行栈顶部（作用域链）。浏览器总是执行位于执行栈顶部的当前执行上下文，一旦执行完毕，该执行上下文就会从执行栈顶部弹出，并且控制权将进入其下的执行上下文。这样，执行栈中的执行上下文就会被依次执行并且弹出，直到回到全局的执行上下文。\n\n十、作用域链\n\n（1）在JavaScript中，函数也是对象，对象中有些属性我们可以访问，但有些不可以（访问），这些属性仅供JavaScript引擎存取，\\[\\[scope\\]\\]就是其中一个。\n\n（2）\\[\\[scope\\]\\]指的就是我们所说的作用域，其中存储了执行上下文的集合。\n\n（3）\\[\\[scope\\]\\]中所存储的执行上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。  \n![](/img/15.png)\n\n（1）运行示例代码将会导致嵌套的函数被从上倒下执行，一直到 fourth 函数，此时作用域链从上到下为： fourth, third, second, first, global。\n\n（2）fourth 函数能够访问全局变量和任何定义在first,second和third函数中的变量（和访问自己的变量一样）。\n\n（3）一旦fourth函数执行完成，其就会从作用域链顶部移除，并且执行权会返回到third函数。这个过程一直持续到所有代码完成执行。","slug":"js-变量","published":1,"updated":"2023-01-11T07:09:20.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcrcceas0000dfq3dw2ifzsv","content":"<h1 id=\"一、作用域\"><a href=\"#一、作用域\" class=\"headerlink\" title=\"一、作用域\"></a><a href=\"#%E4%B8%80%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F\" title=\"一、作用域\"></a>一、作用域</h1><p>在 JavaScript 中, 作用域（scope，或译有效范围）就是变量和函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期</p>\n<h2 id=\"全局-x2F-局部作用域\"><a href=\"#全局-x2F-局部作用域\" class=\"headerlink\" title=\"全局&#x2F;局部作用域\"></a><a href=\"#%E5%85%A8%E5%B1%80-%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F\" title=\"全局/局部作用域\"></a>全局&#x2F;局部作用域</h2><p>2.1 全局作用域(Global Scope)</p>\n<p>（1）不在任何函数内定义的变量就具有全局作用域。<br>（2）实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。<br>（3）window对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等。<br><img src=\"/img/1.png\"></p>\n<p>2.2 局部作用域(Local Scope)<br>（1）JavaScript的作用域是通过函数来定义的，在一个函数中定义的变量只对这个函数内部可见，称为函数（局部）作用域。</p>\n<h2 id=\"全局-x2F-局部变量\"><a href=\"#全局-x2F-局部变量\" class=\"headerlink\" title=\"全局&#x2F;局部变量\"></a><a href=\"#%E5%85%A8%E5%B1%80-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\" title=\"全局/局部变量\"></a>全局&#x2F;局部变量</h2><p>3.1 全局变量</p>\n<p>（1）在函数定义外声明的变量是全局变量。</p>\n<p>（2）全局变量有 全局作用域，它的值可在整个程序中访问和修改。</p>\n<p>（3）如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p>\n<p>3.2 局部变量</p>\n<p>（1）在函数定义内声明的变量是局部变量。</p>\n<p>（2）因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。</p>\n<p>（3）每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。</p>\n<p>（4）函数外无法访问函数内的变量，函数内却可以访问函数外的变量。</p>\n<p>全局变量</p>\n<p>1、在函数定义外声明的变量是全局变量；全局变量有全局作用域，它的值可在整个程序中访问和修改。<br><img src=\"/img/2.png\"><br>2、如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。<br><img src=\"/img/3.png\"></p>\n<p>局部变量</p>\n<p>1、因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。<br><img src=\"/img/5.png\"></p>\n<p>2、每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。<br><img src=\"/img/6.png\"></p>\n<p>3、函数外无法访问函数内的变量，函数内却可以访问函数外的变量。(闭包)<br><img src=\"/img/7.png\"></p>\n<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a><a href=\"#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F\" title=\"块级作用域\"></a>块级作用域</h2><p>块级作用域指在If语句，switch语句，循环语句等语句块中定义变量，这意味着变量不能在语句块之外被访问。</p>\n<p>4 <code>var 不支持块级作用域</code></p>\n<p>（1）在If等语句块中，定义的变量从属于该块所在的作用域，和函数不同，他们不会创建新的作用域。<br><img src=\"/img/11.png\"></p>\n<p><code>let和const</code></p>\n<p>（1）为了解决块级作用域，ES6引入了 let 和 const 关键字，可以声明一个块级作用域的变量。<br><img src=\"/img/12.png\"><br>（2）<strong>*<strong>全局作用域的生存周期与上述应用相同。局部作用域只在该函数调用执行期间存在。</strong>*</strong></p>\n<h2 id=\"七、上下文-vs-作用域\"><a href=\"#七、上下文-vs-作用域\" class=\"headerlink\" title=\"七、上下文 vs 作用域\"></a><a href=\"#%E4%B8%83%E3%80%81%E4%B8%8A%E4%B8%8B%E6%96%87-vs-%E4%BD%9C%E7%94%A8%E5%9F%9F\" title=\"七、上下文 vs 作用域\"></a>七、上下文 vs 作用域</h2><p>（1）首先需要说明的是上下文和作用域是不同的概念。</p>\n<p>（2）每个函数调用都有与之相关的作用域和上下文。从根本上说，作用域是基于函数，而上下文是基于对象。</p>\n<p>（3）作用域是和每次函数调用时变量的访问有关，并且每次调用都是独立的。上下文总是关键字 this 的值，是调用当前可执行代码的对象的引用。</p>\n<h2 id=\"八、“this”-上下文\"><a href=\"#八、“this”-上下文\" class=\"headerlink\" title=\"八、“this” 上下文\"></a><a href=\"#%E5%85%AB%E3%80%81%E2%80%9Cthis%E2%80%9D-%E4%B8%8A%E4%B8%8B%E6%96%87\" title=\"八、“this” 上下文\"></a>八、“this” 上下文</h2><p>（1）上下文通常是取决于一个函数如何被调用。当函数作为对象的方法被调用时，this 指向调用方法的对象。<br><img src=\"/img/13.png\"></p>\n<p>（2）当调用一个函数时，通过 new 操作符创建一个对象的实例，当以这种方式调用时，this 指向新创建的实例。<br><img src=\"/img/14.png\"></p>\n<p>（3）当调用一个未绑定函数，this 默认指向全局上下文或者浏览器中的window对象。然而如果函数在严格模式下被执行(“use strict”)，this 默认指向 undefined。</p>\n<h2 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a><a href=\"#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\" title=\"执行上下文\"></a>执行上下文</h2><p>1）当函数执行时，会创建一个称为执行上下文的内部对象（可理解为作用域，不是前面讨论的上下文）。一个执行上下文定义了一个函数执行时的环境。</p>\n<p>（2）函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文。</p>\n<p>（3）当javascript代码文件被浏览器载入后，默认最先进入的是一个全局的执行上下文。当在全局上下文中调用执行一个函数时，程序流就进入该被调用函数内，此时引擎就会为该函数创建一个新的执行上下文，并且将其压入到执行栈顶部（作用域链）。浏览器总是执行位于执行栈顶部的当前执行上下文，一旦执行完毕，该执行上下文就会从执行栈顶部弹出，并且控制权将进入其下的执行上下文。这样，执行栈中的执行上下文就会被依次执行并且弹出，直到回到全局的执行上下文。</p>\n<p>十、作用域链</p>\n<p>（1）在JavaScript中，函数也是对象，对象中有些属性我们可以访问，但有些不可以（访问），这些属性仅供JavaScript引擎存取，[[scope]]就是其中一个。</p>\n<p>（2）[[scope]]指的就是我们所说的作用域，其中存储了执行上下文的集合。</p>\n<p>（3）[[scope]]中所存储的执行上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。<br><img src=\"/img/15.png\"></p>\n<p>（1）运行示例代码将会导致嵌套的函数被从上倒下执行，一直到 fourth 函数，此时作用域链从上到下为： fourth, third, second, first, global。</p>\n<p>（2）fourth 函数能够访问全局变量和任何定义在first,second和third函数中的变量（和访问自己的变量一样）。</p>\n<p>（3）一旦fourth函数执行完成，其就会从作用域链顶部移除，并且执行权会返回到third函数。这个过程一直持续到所有代码完成执行。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、作用域\"><a href=\"#一、作用域\" class=\"headerlink\" title=\"一、作用域\"></a><a href=\"#%E4%B8%80%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F\" title=\"一、作用域\"></a>一、作用域</h1><p>在 JavaScript 中, 作用域（scope，或译有效范围）就是变量和函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期</p>\n<h2 id=\"全局-x2F-局部作用域\"><a href=\"#全局-x2F-局部作用域\" class=\"headerlink\" title=\"全局&#x2F;局部作用域\"></a><a href=\"#%E5%85%A8%E5%B1%80-%E5%B1%80%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F\" title=\"全局/局部作用域\"></a>全局&#x2F;局部作用域</h2><p>2.1 全局作用域(Global Scope)</p>\n<p>（1）不在任何函数内定义的变量就具有全局作用域。<br>（2）实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。<br>（3）window对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等。<br><img src=\"/img/1.png\"></p>\n<p>2.2 局部作用域(Local Scope)<br>（1）JavaScript的作用域是通过函数来定义的，在一个函数中定义的变量只对这个函数内部可见，称为函数（局部）作用域。</p>\n<h2 id=\"全局-x2F-局部变量\"><a href=\"#全局-x2F-局部变量\" class=\"headerlink\" title=\"全局&#x2F;局部变量\"></a><a href=\"#%E5%85%A8%E5%B1%80-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\" title=\"全局/局部变量\"></a>全局&#x2F;局部变量</h2><p>3.1 全局变量</p>\n<p>（1）在函数定义外声明的变量是全局变量。</p>\n<p>（2）全局变量有 全局作用域，它的值可在整个程序中访问和修改。</p>\n<p>（3）如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p>\n<p>3.2 局部变量</p>\n<p>（1）在函数定义内声明的变量是局部变量。</p>\n<p>（2）因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。</p>\n<p>（3）每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。</p>\n<p>（4）函数外无法访问函数内的变量，函数内却可以访问函数外的变量。</p>\n<p>全局变量</p>\n<p>1、在函数定义外声明的变量是全局变量；全局变量有全局作用域，它的值可在整个程序中访问和修改。<br><img src=\"/img/2.png\"><br>2、如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。<br><img src=\"/img/3.png\"></p>\n<p>局部变量</p>\n<p>1、因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。<br><img src=\"/img/5.png\"></p>\n<p>2、每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。<br><img src=\"/img/6.png\"></p>\n<p>3、函数外无法访问函数内的变量，函数内却可以访问函数外的变量。(闭包)<br><img src=\"/img/7.png\"></p>\n<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a><a href=\"#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F\" title=\"块级作用域\"></a>块级作用域</h2><p>块级作用域指在If语句，switch语句，循环语句等语句块中定义变量，这意味着变量不能在语句块之外被访问。</p>\n<p>4 <code>var 不支持块级作用域</code></p>\n<p>（1）在If等语句块中，定义的变量从属于该块所在的作用域，和函数不同，他们不会创建新的作用域。<br><img src=\"/img/11.png\"></p>\n<p><code>let和const</code></p>\n<p>（1）为了解决块级作用域，ES6引入了 let 和 const 关键字，可以声明一个块级作用域的变量。<br><img src=\"/img/12.png\"><br>（2）<strong>*<strong>全局作用域的生存周期与上述应用相同。局部作用域只在该函数调用执行期间存在。</strong>*</strong></p>\n<h2 id=\"七、上下文-vs-作用域\"><a href=\"#七、上下文-vs-作用域\" class=\"headerlink\" title=\"七、上下文 vs 作用域\"></a><a href=\"#%E4%B8%83%E3%80%81%E4%B8%8A%E4%B8%8B%E6%96%87-vs-%E4%BD%9C%E7%94%A8%E5%9F%9F\" title=\"七、上下文 vs 作用域\"></a>七、上下文 vs 作用域</h2><p>（1）首先需要说明的是上下文和作用域是不同的概念。</p>\n<p>（2）每个函数调用都有与之相关的作用域和上下文。从根本上说，作用域是基于函数，而上下文是基于对象。</p>\n<p>（3）作用域是和每次函数调用时变量的访问有关，并且每次调用都是独立的。上下文总是关键字 this 的值，是调用当前可执行代码的对象的引用。</p>\n<h2 id=\"八、“this”-上下文\"><a href=\"#八、“this”-上下文\" class=\"headerlink\" title=\"八、“this” 上下文\"></a><a href=\"#%E5%85%AB%E3%80%81%E2%80%9Cthis%E2%80%9D-%E4%B8%8A%E4%B8%8B%E6%96%87\" title=\"八、“this” 上下文\"></a>八、“this” 上下文</h2><p>（1）上下文通常是取决于一个函数如何被调用。当函数作为对象的方法被调用时，this 指向调用方法的对象。<br><img src=\"/img/13.png\"></p>\n<p>（2）当调用一个函数时，通过 new 操作符创建一个对象的实例，当以这种方式调用时，this 指向新创建的实例。<br><img src=\"/img/14.png\"></p>\n<p>（3）当调用一个未绑定函数，this 默认指向全局上下文或者浏览器中的window对象。然而如果函数在严格模式下被执行(“use strict”)，this 默认指向 undefined。</p>\n<h2 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a><a href=\"#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87\" title=\"执行上下文\"></a>执行上下文</h2><p>1）当函数执行时，会创建一个称为执行上下文的内部对象（可理解为作用域，不是前面讨论的上下文）。一个执行上下文定义了一个函数执行时的环境。</p>\n<p>（2）函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文。</p>\n<p>（3）当javascript代码文件被浏览器载入后，默认最先进入的是一个全局的执行上下文。当在全局上下文中调用执行一个函数时，程序流就进入该被调用函数内，此时引擎就会为该函数创建一个新的执行上下文，并且将其压入到执行栈顶部（作用域链）。浏览器总是执行位于执行栈顶部的当前执行上下文，一旦执行完毕，该执行上下文就会从执行栈顶部弹出，并且控制权将进入其下的执行上下文。这样，执行栈中的执行上下文就会被依次执行并且弹出，直到回到全局的执行上下文。</p>\n<p>十、作用域链</p>\n<p>（1）在JavaScript中，函数也是对象，对象中有些属性我们可以访问，但有些不可以（访问），这些属性仅供JavaScript引擎存取，[[scope]]就是其中一个。</p>\n<p>（2）[[scope]]指的就是我们所说的作用域，其中存储了执行上下文的集合。</p>\n<p>（3）[[scope]]中所存储的执行上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。<br><img src=\"/img/15.png\"></p>\n<p>（1）运行示例代码将会导致嵌套的函数被从上倒下执行，一直到 fourth 函数，此时作用域链从上到下为： fourth, third, second, first, global。</p>\n<p>（2）fourth 函数能够访问全局变量和任何定义在first,second和third函数中的变量（和访问自己的变量一样）。</p>\n<p>（3）一旦fourth函数执行完成，其就会从作用域链顶部移除，并且执行权会返回到third函数。这个过程一直持续到所有代码完成执行。</p>\n"},{"title":"postMessage","date":"2023-01-11T07:14:34.000Z","_content":"## [](#vue内嵌iframe并跨域通信 \"vue内嵌iframe并跨域通信\")vue内嵌iframe并跨域通信\n\n#### [](#近期做新老boss跳转页面-老boss使用sessionStorage存储数据-总结一下遇到的问题 \"近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题\")近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题\n\nsessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。\n\n#### [](#同源的判断规则： \"同源的判断规则：\")同源的判断规则：\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.test.com</span><br><span class=\"line\">https://www.test.com （不同源，因为协议不同）</span><br><span class=\"line\">http://my.test.com（不同源，因为主机名不同）</span><br><span class=\"line\">http://www.test.com:8080（不同源，因为端口不同）</span><br></pre></td></tr></tbody></table>\n\n#### [](#在此项目原先只用document-cookie-没成功，使用了ifram跨域通信去解决，使用的技术是window-postMessage \"在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage\")在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage\n\n参考文档： [https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage)\n\n> 1、先在vue引入iframe\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;template&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"act-form\"</span>&gt;</span><br><span class=\"line\">        &lt;iframe :src=<span class=\"string\">\"src\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>template&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span><br><span class=\"line\">    data () {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> {</span><br><span class=\"line\">        src: <span class=\"string\">'你的src'</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">```  </span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&gt;2、操作iframe获取其对象 </span></span><br><span class=\"line\"><span class=\"regexp\">``` javascript</span></span><br><span class=\"line\"><span class=\"regexp\">mounted () {</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 这里就拿到了iframe的对象</span></span><br><span class=\"line\"><span class=\"regexp\">    this.$refs.iframe</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 这里就拿到了iframe的window对象</span></span><br><span class=\"line\"><span class=\"regexp\">    this.$refs.iframe.contentWindow</span></span><br><span class=\"line\"><span class=\"regexp\">  }</span></span><br></pre></td></tr></tbody></table>\n\n![](/img/iframe1.png)\n\n> 3、vue里面嵌入iframe开始向其传递数据\n\n* * *\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**这里用到了<span class=\"selector-tag\">postMessage</span>   写法 <span class=\"selector-tag\">otherWindow</span><span class=\"selector-class\">.postMessage</span>(<span class=\"selector-tag\">message</span>, <span class=\"selector-tag\">targetOrigin</span>, <span class=\"selector-attr\">[transfer]</span>)**</span><br></pre></td></tr></tbody></table>\n\n\\[otherWindow\\]\n\n> 其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。\n\n\\[message\\]\n\n> 将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化\n\n\\[targetOrigin\\]\n\n> 通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串*（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是*。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。\n\n* * *\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: {</span><br><span class=\"line\">    sendMessage (userData) {</span><br><span class=\"line\">        <span class=\"comment\">// 外部vue向iframe内部传数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.iframeWin.postMessage({</span><br><span class=\"line\">           <span class=\"comment\">// cmd: 'getFormJson',</span></span><br><span class=\"line\">            params: userData</span><br><span class=\"line\">        }, <span class=\"string\">'*'</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table>\n\n这里通过点击事件触发，向iframe发送信息，iframe内部通过如下去处理这条数据\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受父页面发来的信息</span></span><br><span class=\"line\">       <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> data = event.data.params</span><br><span class=\"line\">\tsessionStorage.setItem(<span class=\"string\">\"user_data\"</span>,<span class=\"built_in\">JSON</span>.stringify(data.data));</span><br><span class=\"line\">\tsessionStorage.setItem(<span class=\"string\">\"listAuth_data\"</span>,<span class=\"built_in\">JSON</span>.stringify(data.data.listAuth));</span><br><span class=\"line\">       });</span><br></pre></td></tr></tbody></table>\n\n![](/img/iframe2.png)  \n此时已经完全解决这些跨域的参数通信，注意的就是 \\* 有指定的域名最好指定 安全为上！","source":"_posts/postMessage.md","raw":"---\ntitle: postMessage\ndate: 2023-01-11 15:14:34\ntags:\n---\n## [](#vue内嵌iframe并跨域通信 \"vue内嵌iframe并跨域通信\")vue内嵌iframe并跨域通信\n\n#### [](#近期做新老boss跳转页面-老boss使用sessionStorage存储数据-总结一下遇到的问题 \"近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题\")近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题\n\nsessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。\n\n#### [](#同源的判断规则： \"同源的判断规则：\")同源的判断规则：\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.test.com</span><br><span class=\"line\">https://www.test.com （不同源，因为协议不同）</span><br><span class=\"line\">http://my.test.com（不同源，因为主机名不同）</span><br><span class=\"line\">http://www.test.com:8080（不同源，因为端口不同）</span><br></pre></td></tr></tbody></table>\n\n#### [](#在此项目原先只用document-cookie-没成功，使用了ifram跨域通信去解决，使用的技术是window-postMessage \"在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage\")在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage\n\n参考文档： [https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage)\n\n> 1、先在vue引入iframe\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;template&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"act-form\"</span>&gt;</span><br><span class=\"line\">        &lt;iframe :src=<span class=\"string\">\"src\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>template&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span><br><span class=\"line\">    data () {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> {</span><br><span class=\"line\">        src: <span class=\"string\">'你的src'</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">```  </span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&gt;2、操作iframe获取其对象 </span></span><br><span class=\"line\"><span class=\"regexp\">``` javascript</span></span><br><span class=\"line\"><span class=\"regexp\">mounted () {</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 这里就拿到了iframe的对象</span></span><br><span class=\"line\"><span class=\"regexp\">    this.$refs.iframe</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 这里就拿到了iframe的window对象</span></span><br><span class=\"line\"><span class=\"regexp\">    this.$refs.iframe.contentWindow</span></span><br><span class=\"line\"><span class=\"regexp\">  }</span></span><br></pre></td></tr></tbody></table>\n\n![](/img/iframe1.png)\n\n> 3、vue里面嵌入iframe开始向其传递数据\n\n* * *\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**这里用到了<span class=\"selector-tag\">postMessage</span>   写法 <span class=\"selector-tag\">otherWindow</span><span class=\"selector-class\">.postMessage</span>(<span class=\"selector-tag\">message</span>, <span class=\"selector-tag\">targetOrigin</span>, <span class=\"selector-attr\">[transfer]</span>)**</span><br></pre></td></tr></tbody></table>\n\n\\[otherWindow\\]\n\n> 其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。\n\n\\[message\\]\n\n> 将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化\n\n\\[targetOrigin\\]\n\n> 通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串*（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是*。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。\n\n* * *\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: {</span><br><span class=\"line\">    sendMessage (userData) {</span><br><span class=\"line\">        <span class=\"comment\">// 外部vue向iframe内部传数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.iframeWin.postMessage({</span><br><span class=\"line\">           <span class=\"comment\">// cmd: 'getFormJson',</span></span><br><span class=\"line\">            params: userData</span><br><span class=\"line\">        }, <span class=\"string\">'*'</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table>\n\n这里通过点击事件触发，向iframe发送信息，iframe内部通过如下去处理这条数据\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受父页面发来的信息</span></span><br><span class=\"line\">       <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> data = event.data.params</span><br><span class=\"line\">\tsessionStorage.setItem(<span class=\"string\">\"user_data\"</span>,<span class=\"built_in\">JSON</span>.stringify(data.data));</span><br><span class=\"line\">\tsessionStorage.setItem(<span class=\"string\">\"listAuth_data\"</span>,<span class=\"built_in\">JSON</span>.stringify(data.data.listAuth));</span><br><span class=\"line\">       });</span><br></pre></td></tr></tbody></table>\n\n![](/img/iframe2.png)  \n此时已经完全解决这些跨域的参数通信，注意的就是 \\* 有指定的域名最好指定 安全为上！","slug":"postMessage","published":1,"updated":"2023-01-11T07:15:41.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcrcceau0001dfq37bqs5lvg","content":"<h2 id=\"vue内嵌iframe并跨域通信\"><a href=\"#vue内嵌iframe并跨域通信\" class=\"headerlink\" title=\"vue内嵌iframe并跨域通信\"></a><a href=\"#vue%E5%86%85%E5%B5%8Ciframe%E5%B9%B6%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1\" title=\"vue内嵌iframe并跨域通信\"></a>vue内嵌iframe并跨域通信</h2><h4 id=\"近期做新老boss跳转页面-老boss使用sessionStorage存储数据-总结一下遇到的问题\"><a href=\"#近期做新老boss跳转页面-老boss使用sessionStorage存储数据-总结一下遇到的问题\" class=\"headerlink\" title=\"近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题\"></a><a href=\"#%E8%BF%91%E6%9C%9F%E5%81%9A%E6%96%B0%E8%80%81boss%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2-%E8%80%81boss%E4%BD%BF%E7%94%A8sessionStorage%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE-%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\" title=\"近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题\"></a>近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题</h4><p>sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。</p>\n<h4 id=\"同源的判断规则：\"><a href=\"#同源的判断规则：\" class=\"headerlink\" title=\"同源的判断规则：\"></a><a href=\"#%E5%90%8C%E6%BA%90%E7%9A%84%E5%88%A4%E6%96%AD%E8%A7%84%E5%88%99%EF%BC%9A\" title=\"同源的判断规则：\"></a>同源的判断规则：</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.test.com</span><br><span class=\"line\">https://www.test.com （不同源，因为协议不同）</span><br><span class=\"line\">http://my.test.com（不同源，因为主机名不同）</span><br><span class=\"line\">http://www.test.com:8080（不同源，因为端口不同）</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"在此项目原先只用document-cookie-没成功，使用了ifram跨域通信去解决，使用的技术是window-postMessage\"><a href=\"#在此项目原先只用document-cookie-没成功，使用了ifram跨域通信去解决，使用的技术是window-postMessage\" class=\"headerlink\" title=\"在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage\"></a><a href=\"#%E5%9C%A8%E6%AD%A4%E9%A1%B9%E7%9B%AE%E5%8E%9F%E5%85%88%E5%8F%AA%E7%94%A8document-cookie-%E6%B2%A1%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%BF%E7%94%A8%E4%BA%86ifram%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1%E5%8E%BB%E8%A7%A3%E5%86%B3%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E6%98%AFwindow-postMessage\" title=\"在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage\"></a>在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage</h4><p>参考文档： <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p>\n<blockquote>\n<p>1、先在vue引入iframe</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;template&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"act-form\"</span>&gt;</span><br><span class=\"line\">        &lt;iframe :src=<span class=\"string\">\"src\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>template&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span><br><span class=\"line\">    data () {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> {</span><br><span class=\"line\">        src: <span class=\"string\">'你的src'</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">```  </span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&gt;2、操作iframe获取其对象 </span></span><br><span class=\"line\"><span class=\"regexp\">``` javascript</span></span><br><span class=\"line\"><span class=\"regexp\">mounted () {</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 这里就拿到了iframe的对象</span></span><br><span class=\"line\"><span class=\"regexp\">    this.$refs.iframe</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 这里就拿到了iframe的window对象</span></span><br><span class=\"line\"><span class=\"regexp\">    this.$refs.iframe.contentWindow</span></span><br><span class=\"line\"><span class=\"regexp\">  }</span></span><br></pre></td></tr></tbody></table>\n\n<p><img src=\"/img/iframe1.png\"></p>\n<blockquote>\n<p>3、vue里面嵌入iframe开始向其传递数据</p>\n</blockquote>\n<hr>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**这里用到了<span class=\"selector-tag\">postMessage</span>   写法 <span class=\"selector-tag\">otherWindow</span><span class=\"selector-class\">.postMessage</span>(<span class=\"selector-tag\">message</span>, <span class=\"selector-tag\">targetOrigin</span>, <span class=\"selector-attr\">[transfer]</span>)**</span><br></pre></td></tr></tbody></table>\n\n<p>[otherWindow]</p>\n<blockquote>\n<p>其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。</p>\n</blockquote>\n<p>[message]</p>\n<blockquote>\n<p>将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化</p>\n</blockquote>\n<p>[targetOrigin]</p>\n<blockquote>\n<p>通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串<em>（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是</em>。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</p>\n</blockquote>\n<hr>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: {</span><br><span class=\"line\">    sendMessage (userData) {</span><br><span class=\"line\">        <span class=\"comment\">// 外部vue向iframe内部传数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.iframeWin.postMessage({</span><br><span class=\"line\">           <span class=\"comment\">// cmd: 'getFormJson',</span></span><br><span class=\"line\">            params: userData</span><br><span class=\"line\">        }, <span class=\"string\">'*'</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table>\n\n<p>这里通过点击事件触发，向iframe发送信息，iframe内部通过如下去处理这条数据</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受父页面发来的信息</span></span><br><span class=\"line\">       <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> data = event.data.params</span><br><span class=\"line\">\tsessionStorage.setItem(<span class=\"string\">\"user_data\"</span>,<span class=\"built_in\">JSON</span>.stringify(data.data));</span><br><span class=\"line\">\tsessionStorage.setItem(<span class=\"string\">\"listAuth_data\"</span>,<span class=\"built_in\">JSON</span>.stringify(data.data.listAuth));</span><br><span class=\"line\">       });</span><br></pre></td></tr></tbody></table>\n\n<p><img src=\"/img/iframe2.png\"><br>此时已经完全解决这些跨域的参数通信，注意的就是 * 有指定的域名最好指定 安全为上！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue内嵌iframe并跨域通信\"><a href=\"#vue内嵌iframe并跨域通信\" class=\"headerlink\" title=\"vue内嵌iframe并跨域通信\"></a><a href=\"#vue%E5%86%85%E5%B5%8Ciframe%E5%B9%B6%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1\" title=\"vue内嵌iframe并跨域通信\"></a>vue内嵌iframe并跨域通信</h2><h4 id=\"近期做新老boss跳转页面-老boss使用sessionStorage存储数据-总结一下遇到的问题\"><a href=\"#近期做新老boss跳转页面-老boss使用sessionStorage存储数据-总结一下遇到的问题\" class=\"headerlink\" title=\"近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题\"></a><a href=\"#%E8%BF%91%E6%9C%9F%E5%81%9A%E6%96%B0%E8%80%81boss%E8%B7%B3%E8%BD%AC%E9%A1%B5%E9%9D%A2-%E8%80%81boss%E4%BD%BF%E7%94%A8sessionStorage%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE-%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\" title=\"近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题\"></a>近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题</h4><p>sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。</p>\n<h4 id=\"同源的判断规则：\"><a href=\"#同源的判断规则：\" class=\"headerlink\" title=\"同源的判断规则：\"></a><a href=\"#%E5%90%8C%E6%BA%90%E7%9A%84%E5%88%A4%E6%96%AD%E8%A7%84%E5%88%99%EF%BC%9A\" title=\"同源的判断规则：\"></a>同源的判断规则：</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.test.com</span><br><span class=\"line\">https://www.test.com （不同源，因为协议不同）</span><br><span class=\"line\">http://my.test.com（不同源，因为主机名不同）</span><br><span class=\"line\">http://www.test.com:8080（不同源，因为端口不同）</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"在此项目原先只用document-cookie-没成功，使用了ifram跨域通信去解决，使用的技术是window-postMessage\"><a href=\"#在此项目原先只用document-cookie-没成功，使用了ifram跨域通信去解决，使用的技术是window-postMessage\" class=\"headerlink\" title=\"在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage\"></a><a href=\"#%E5%9C%A8%E6%AD%A4%E9%A1%B9%E7%9B%AE%E5%8E%9F%E5%85%88%E5%8F%AA%E7%94%A8document-cookie-%E6%B2%A1%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%BF%E7%94%A8%E4%BA%86ifram%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1%E5%8E%BB%E8%A7%A3%E5%86%B3%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E6%98%AFwindow-postMessage\" title=\"在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage\"></a>在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage</h4><p>参考文档： <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p>\n<blockquote>\n<p>1、先在vue引入iframe</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   &lt;template&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"act-form\"</span>&gt;</span><br><span class=\"line\">        &lt;iframe :src=<span class=\"string\">\"src\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>template&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span><br><span class=\"line\">    data () {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> {</span><br><span class=\"line\">        src: <span class=\"string\">'你的src'</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">```  </span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&gt;2、操作iframe获取其对象 </span></span><br><span class=\"line\"><span class=\"regexp\">``` javascript</span></span><br><span class=\"line\"><span class=\"regexp\">mounted () {</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 这里就拿到了iframe的对象</span></span><br><span class=\"line\"><span class=\"regexp\">    this.$refs.iframe</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ 这里就拿到了iframe的window对象</span></span><br><span class=\"line\"><span class=\"regexp\">    this.$refs.iframe.contentWindow</span></span><br><span class=\"line\"><span class=\"regexp\">  }</span></span><br></pre></td></tr></tbody></table>\n\n<p><img src=\"/img/iframe1.png\"></p>\n<blockquote>\n<p>3、vue里面嵌入iframe开始向其传递数据</p>\n</blockquote>\n<hr>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**这里用到了<span class=\"selector-tag\">postMessage</span>   写法 <span class=\"selector-tag\">otherWindow</span><span class=\"selector-class\">.postMessage</span>(<span class=\"selector-tag\">message</span>, <span class=\"selector-tag\">targetOrigin</span>, <span class=\"selector-attr\">[transfer]</span>)**</span><br></pre></td></tr></tbody></table>\n\n<p>[otherWindow]</p>\n<blockquote>\n<p>其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。</p>\n</blockquote>\n<p>[message]</p>\n<blockquote>\n<p>将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化</p>\n</blockquote>\n<p>[targetOrigin]</p>\n<blockquote>\n<p>通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串<em>（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是</em>。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</p>\n</blockquote>\n<hr>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: {</span><br><span class=\"line\">    sendMessage (userData) {</span><br><span class=\"line\">        <span class=\"comment\">// 外部vue向iframe内部传数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.iframeWin.postMessage({</span><br><span class=\"line\">           <span class=\"comment\">// cmd: 'getFormJson',</span></span><br><span class=\"line\">            params: userData</span><br><span class=\"line\">        }, <span class=\"string\">'*'</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table>\n\n<p>这里通过点击事件触发，向iframe发送信息，iframe内部通过如下去处理这条数据</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接受父页面发来的信息</span></span><br><span class=\"line\">       <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> data = event.data.params</span><br><span class=\"line\">\tsessionStorage.setItem(<span class=\"string\">\"user_data\"</span>,<span class=\"built_in\">JSON</span>.stringify(data.data));</span><br><span class=\"line\">\tsessionStorage.setItem(<span class=\"string\">\"listAuth_data\"</span>,<span class=\"built_in\">JSON</span>.stringify(data.data.listAuth));</span><br><span class=\"line\">       });</span><br></pre></td></tr></tbody></table>\n\n<p><img src=\"/img/iframe2.png\"><br>此时已经完全解决这些跨域的参数通信，注意的就是 * 有指定的域名最好指定 安全为上！</p>\n"},{"title":"图片水印生成","date":"2023-01-11T07:16:39.000Z","_content":"> 近期项目需要做一个 定位打卡，拍照加上水印的功能，项目是用的react+Ant mobile\n\n  选用了 ImagePicker 图片选择器，代码如下\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ImagePicker</span><br><span class=\"line\">    length={4}</span><br><span class=\"line\">    disableDelete={true}</span><br><span class=\"line\">    files={this.state.attachmentUrl}</span><br><span class=\"line\">    onChange={this.onChangeFiles}</span><br><span class=\"line\">    onImageClick={(index, fs) =&gt; this.openViewer(index, fs)}</span><br><span class=\"line\">    selectable={this.state.attachmentUrl.length &lt; 20}</span><br><span class=\"line\">    multiple={this.state.multiple}</span><br><span class=\"line\">    capture=\"camera\"  // 只支持 相机拍照</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></tbody></table>\n\n  在onChange 里面调用方法，就能上传图片显示了，这里不多说介绍，上传图片的原理都差不多。  \n接下来说下给图片加水印的操作，在激烈的碰撞中，发现可以通过用Canvas，给图片上水印(本次是通过后台接口生成的)，之后慢慢的预研了一波。\n\n**前端图片加水印原理很简单，主要分为下面几步：**\n\n1.  将需要添加水印的图片绘制到 canvas 上\n2.  将水印图片绘制到 canvas 上\n3.  将 canvas 的内容导出为图片\n\n### [](#前期学习 \"前期学习\")前期学习\n\n 使用canvas在前端实现图片水印合成\n\n  1.在底图上加上想要的水印，核心代码如下\n\n```auto\n123456789101112// 获取当前 canvas 的上下文环境，用来操作在 canvas 上绘制内容const ctx = canvas.getContext('2d')// 向 canvas 上绘制图片// image 为一个图片对象// x 为绘制图片的横向起始位置，y 为绘制图片的纵向起始位置// width 为要绘制在 canvas 上宽度， height 为高度// 该方法最多可接受 9 个参数，从而实现剪裁的效果，但是与本篇内容无关，感兴趣的小伙伴可以搜索该方法ctx.drawImage(image, x, y, width, height)// 将 canvas 上的内容导出为 base64 格式的字符串，导出后可以直接赋值给 Image 对象的 src 属性// 第一个参数为导出的图片格式，可接受第二个参数（小于或等于 1 的数，表示导出图片的压缩比率）canvas.toDataURL(\"image/png\")context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\n```\n\n**drawImage接受参数示意**\n\n| 参数 | 描述 |\n| --- | --- |\n| img | 用来被绘制的图像、画布或视频 |\n| sx | 可选。img被绘制区域的起始左上x坐标。 |\n| sy | 可选。img被绘制区域的起始左上y坐标。 |\n| swidth | 可选。img被绘制区域的宽度（如果没有后面的width或height参数，则可以伸展或缩小图像）。 |\n| sheight | 可选。img被绘制区域的高度（如果没有后面的width或height参数，则可以伸展或缩小图像）。 |\n| x | 画布上放置img的起始x坐标。 |\n| y | 画布上放置img的起始y坐标。 |\n| width | 可选。画布上放置img提供的宽度（可能会有图片剪裁效果）。 |\n| height | 可选。画布上放置img提供的高度（可能会有图片剪裁效果）。 |\n\n> 步骤\n\n 1、本地图片转成Base64  \n 在onChange 上传图片 直接获取到的对象包含了base64格式的图片数据，如图：  \n![](/img/shuiyin1.png)\n\n 2、使用H5 `FlieReader` 读取base64格式的图片数据，将图片数据赋值给image 对象  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reader = new FileReader();</span><br><span class=\"line\">       reader.readAsDataURL(files);</span><br><span class=\"line\">       reader.onload = (e) =&gt; {</span><br><span class=\"line\">           const img = document.createElement('img');</span><br><span class=\"line\">           img.src = reader.result;</span><br><span class=\"line\">           }</span><br></pre></td></tr></tbody></table>\n\n 3、调用canvas元素画布上下文对象的drawImage方法即可实现将img内容绘制到画布  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const canvas = document.createElement('canvas');</span><br><span class=\"line\">  // 设置画布高宽</span><br><span class=\"line\">  canvas.width = img.width</span><br><span class=\"line\">  canvas.height = img.height</span><br><span class=\"line\">  let ctx = canvas.getContext('2d')</span><br><span class=\"line\">  ctx.drawImage(img, 0, 0)</span><br></pre></td></tr></tbody></table>\n\n> **drawImage**这个方法可以传入多个参数（楼上已经述说过了），以定义绘制的图像的范围，这里传入的0, 0定义从图像左上角开始绘制，后面可以继续传入两个参数来定义图像的绘制终点，不过这里整个图片都要绘制到canvas，所以采用默认值即可。注意点：要设置画布的高宽，到时候图片需要平铺到整个画布上，不加 的话 大图会被裁剪掉。\n\n 4、在画布上添加水印并借助canvas的`toDataURL()`方法把我们的canvas画布转换成base64无损PNG地址，这里就可以按照canvas的Api进行水印的操作\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置填充字号和字体，样式</span><br><span class=\"line\">   ctx.font = \"24px 宋体\"</span><br><span class=\"line\">   ctx.fillStyle = \"#FFC82C\"</span><br><span class=\"line\">   // 设置右对齐</span><br><span class=\"line\">   ctx.textAlign = 'right'</span><br><span class=\"line\">   // 在指定位置绘制文字，这里指定距离右下角20坐标的地方</span><br><span class=\"line\">   ctx.fillText('HOSJOY', canvas.width - 20, canvas.height - 20)</span><br><span class=\"line\">   canvas.toDataURL(\"image/png\")</span><br></pre></td></tr></tbody></table>\n\n 5、Demo完整代码如下：  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reader = new FileReader();</span><br><span class=\"line\">       reader.readAsDataURL(files);</span><br><span class=\"line\">       reader.onload = (e) =&gt; {</span><br><span class=\"line\">           const img = document.createElement('img');</span><br><span class=\"line\">           img.src = reader.result;</span><br><span class=\"line\">           const canvas = document.createElement('canvas');</span><br><span class=\"line\">           // 如何获取图片高度 宽度</span><br><span class=\"line\"></span><br><span class=\"line\">           var size = 100;</span><br><span class=\"line\">           img.onload = async () =&gt; {</span><br><span class=\"line\">               console.log(22, img.width)</span><br><span class=\"line\">               const ctx = canvas.getContext('2d');</span><br><span class=\"line\">               canvas.width = img.width;</span><br><span class=\"line\">               canvas.height = img.height;</span><br><span class=\"line\">               ctx.drawImage(img, 0, 0);</span><br><span class=\"line\">               // ctx.drawImage(img,  0, 0, size, size, 0,0, size, size); 图片水印</span><br><span class=\"line\">               ctx.fillStyle = 'white';</span><br><span class=\"line\">               ctx.textBaseline = 'middle';</span><br><span class=\"line\">               ctx.font =\"24px 宋体\"</span><br><span class=\"line\">               ctx.fillText('Hello HOSJOY', 20, 20);</span><br><span class=\"line\">               // canvas.toBlob(resolve);</span><br><span class=\"line\">               // this.setState({</span><br><span class=\"line\">               //     attachmentUrl: this.state.attachmentUrl.concat({</span><br><span class=\"line\">               //         url: canvas.toDataURL(\"image/png\"),  // 生成base64的图片地址</span><br><span class=\"line\">               //     })</span><br><span class=\"line\">               // })</span><br><span class=\"line\">               const fileNew = canvas.toDataURL(\"image/png\")</span><br><span class=\"line\">              /这里执行后台上传接口</span><br><span class=\"line\">           }</span><br><span class=\"line\">       }</span><br></pre></td></tr></tbody></table>\n\n 这样就完整地给图片添加了水印效果，下面看一下实际效果，最终结果：  \n![](/img/shuiyin2.png)\n\n> 总结\n> \n> > 前端给一个图片做简单的水印，canvas提供的一些API其实很有用，前端利用canvas的drawImage()可以实现对图片进行压缩，不妨大家可以试试,既然已经看到了最后，就请你伸出有魔力的手指点个关注吧！谢谢啦","source":"_posts/图片水印生成.md","raw":"---\ntitle: 图片水印生成\ndate: 2023-01-11 15:16:39\ntags:\n---\n> 近期项目需要做一个 定位打卡，拍照加上水印的功能，项目是用的react+Ant mobile\n\n  选用了 ImagePicker 图片选择器，代码如下\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ImagePicker</span><br><span class=\"line\">    length={4}</span><br><span class=\"line\">    disableDelete={true}</span><br><span class=\"line\">    files={this.state.attachmentUrl}</span><br><span class=\"line\">    onChange={this.onChangeFiles}</span><br><span class=\"line\">    onImageClick={(index, fs) =&gt; this.openViewer(index, fs)}</span><br><span class=\"line\">    selectable={this.state.attachmentUrl.length &lt; 20}</span><br><span class=\"line\">    multiple={this.state.multiple}</span><br><span class=\"line\">    capture=\"camera\"  // 只支持 相机拍照</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></tbody></table>\n\n  在onChange 里面调用方法，就能上传图片显示了，这里不多说介绍，上传图片的原理都差不多。  \n接下来说下给图片加水印的操作，在激烈的碰撞中，发现可以通过用Canvas，给图片上水印(本次是通过后台接口生成的)，之后慢慢的预研了一波。\n\n**前端图片加水印原理很简单，主要分为下面几步：**\n\n1.  将需要添加水印的图片绘制到 canvas 上\n2.  将水印图片绘制到 canvas 上\n3.  将 canvas 的内容导出为图片\n\n### [](#前期学习 \"前期学习\")前期学习\n\n 使用canvas在前端实现图片水印合成\n\n  1.在底图上加上想要的水印，核心代码如下\n\n```auto\n123456789101112// 获取当前 canvas 的上下文环境，用来操作在 canvas 上绘制内容const ctx = canvas.getContext('2d')// 向 canvas 上绘制图片// image 为一个图片对象// x 为绘制图片的横向起始位置，y 为绘制图片的纵向起始位置// width 为要绘制在 canvas 上宽度， height 为高度// 该方法最多可接受 9 个参数，从而实现剪裁的效果，但是与本篇内容无关，感兴趣的小伙伴可以搜索该方法ctx.drawImage(image, x, y, width, height)// 将 canvas 上的内容导出为 base64 格式的字符串，导出后可以直接赋值给 Image 对象的 src 属性// 第一个参数为导出的图片格式，可接受第二个参数（小于或等于 1 的数，表示导出图片的压缩比率）canvas.toDataURL(\"image/png\")context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);\n```\n\n**drawImage接受参数示意**\n\n| 参数 | 描述 |\n| --- | --- |\n| img | 用来被绘制的图像、画布或视频 |\n| sx | 可选。img被绘制区域的起始左上x坐标。 |\n| sy | 可选。img被绘制区域的起始左上y坐标。 |\n| swidth | 可选。img被绘制区域的宽度（如果没有后面的width或height参数，则可以伸展或缩小图像）。 |\n| sheight | 可选。img被绘制区域的高度（如果没有后面的width或height参数，则可以伸展或缩小图像）。 |\n| x | 画布上放置img的起始x坐标。 |\n| y | 画布上放置img的起始y坐标。 |\n| width | 可选。画布上放置img提供的宽度（可能会有图片剪裁效果）。 |\n| height | 可选。画布上放置img提供的高度（可能会有图片剪裁效果）。 |\n\n> 步骤\n\n 1、本地图片转成Base64  \n 在onChange 上传图片 直接获取到的对象包含了base64格式的图片数据，如图：  \n![](/img/shuiyin1.png)\n\n 2、使用H5 `FlieReader` 读取base64格式的图片数据，将图片数据赋值给image 对象  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reader = new FileReader();</span><br><span class=\"line\">       reader.readAsDataURL(files);</span><br><span class=\"line\">       reader.onload = (e) =&gt; {</span><br><span class=\"line\">           const img = document.createElement('img');</span><br><span class=\"line\">           img.src = reader.result;</span><br><span class=\"line\">           }</span><br></pre></td></tr></tbody></table>\n\n 3、调用canvas元素画布上下文对象的drawImage方法即可实现将img内容绘制到画布  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const canvas = document.createElement('canvas');</span><br><span class=\"line\">  // 设置画布高宽</span><br><span class=\"line\">  canvas.width = img.width</span><br><span class=\"line\">  canvas.height = img.height</span><br><span class=\"line\">  let ctx = canvas.getContext('2d')</span><br><span class=\"line\">  ctx.drawImage(img, 0, 0)</span><br></pre></td></tr></tbody></table>\n\n> **drawImage**这个方法可以传入多个参数（楼上已经述说过了），以定义绘制的图像的范围，这里传入的0, 0定义从图像左上角开始绘制，后面可以继续传入两个参数来定义图像的绘制终点，不过这里整个图片都要绘制到canvas，所以采用默认值即可。注意点：要设置画布的高宽，到时候图片需要平铺到整个画布上，不加 的话 大图会被裁剪掉。\n\n 4、在画布上添加水印并借助canvas的`toDataURL()`方法把我们的canvas画布转换成base64无损PNG地址，这里就可以按照canvas的Api进行水印的操作\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置填充字号和字体，样式</span><br><span class=\"line\">   ctx.font = \"24px 宋体\"</span><br><span class=\"line\">   ctx.fillStyle = \"#FFC82C\"</span><br><span class=\"line\">   // 设置右对齐</span><br><span class=\"line\">   ctx.textAlign = 'right'</span><br><span class=\"line\">   // 在指定位置绘制文字，这里指定距离右下角20坐标的地方</span><br><span class=\"line\">   ctx.fillText('HOSJOY', canvas.width - 20, canvas.height - 20)</span><br><span class=\"line\">   canvas.toDataURL(\"image/png\")</span><br></pre></td></tr></tbody></table>\n\n 5、Demo完整代码如下：  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reader = new FileReader();</span><br><span class=\"line\">       reader.readAsDataURL(files);</span><br><span class=\"line\">       reader.onload = (e) =&gt; {</span><br><span class=\"line\">           const img = document.createElement('img');</span><br><span class=\"line\">           img.src = reader.result;</span><br><span class=\"line\">           const canvas = document.createElement('canvas');</span><br><span class=\"line\">           // 如何获取图片高度 宽度</span><br><span class=\"line\"></span><br><span class=\"line\">           var size = 100;</span><br><span class=\"line\">           img.onload = async () =&gt; {</span><br><span class=\"line\">               console.log(22, img.width)</span><br><span class=\"line\">               const ctx = canvas.getContext('2d');</span><br><span class=\"line\">               canvas.width = img.width;</span><br><span class=\"line\">               canvas.height = img.height;</span><br><span class=\"line\">               ctx.drawImage(img, 0, 0);</span><br><span class=\"line\">               // ctx.drawImage(img,  0, 0, size, size, 0,0, size, size); 图片水印</span><br><span class=\"line\">               ctx.fillStyle = 'white';</span><br><span class=\"line\">               ctx.textBaseline = 'middle';</span><br><span class=\"line\">               ctx.font =\"24px 宋体\"</span><br><span class=\"line\">               ctx.fillText('Hello HOSJOY', 20, 20);</span><br><span class=\"line\">               // canvas.toBlob(resolve);</span><br><span class=\"line\">               // this.setState({</span><br><span class=\"line\">               //     attachmentUrl: this.state.attachmentUrl.concat({</span><br><span class=\"line\">               //         url: canvas.toDataURL(\"image/png\"),  // 生成base64的图片地址</span><br><span class=\"line\">               //     })</span><br><span class=\"line\">               // })</span><br><span class=\"line\">               const fileNew = canvas.toDataURL(\"image/png\")</span><br><span class=\"line\">              /这里执行后台上传接口</span><br><span class=\"line\">           }</span><br><span class=\"line\">       }</span><br></pre></td></tr></tbody></table>\n\n 这样就完整地给图片添加了水印效果，下面看一下实际效果，最终结果：  \n![](/img/shuiyin2.png)\n\n> 总结\n> \n> > 前端给一个图片做简单的水印，canvas提供的一些API其实很有用，前端利用canvas的drawImage()可以实现对图片进行压缩，不妨大家可以试试,既然已经看到了最后，就请你伸出有魔力的手指点个关注吧！谢谢啦","slug":"图片水印生成","published":1,"updated":"2023-01-11T07:19:05.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcrcceav0002dfq31zjvgmvk","content":"<blockquote>\n<p>近期项目需要做一个 定位打卡，拍照加上水印的功能，项目是用的react+Ant mobile</p>\n</blockquote>\n<p>  选用了 ImagePicker 图片选择器，代码如下</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ImagePicker</span><br><span class=\"line\">    length={4}</span><br><span class=\"line\">    disableDelete={true}</span><br><span class=\"line\">    files={this.state.attachmentUrl}</span><br><span class=\"line\">    onChange={this.onChangeFiles}</span><br><span class=\"line\">    onImageClick={(index, fs) =&gt; this.openViewer(index, fs)}</span><br><span class=\"line\">    selectable={this.state.attachmentUrl.length &lt; 20}</span><br><span class=\"line\">    multiple={this.state.multiple}</span><br><span class=\"line\">    capture=\"camera\"  // 只支持 相机拍照</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></tbody></table>\n\n<p>  在onChange 里面调用方法，就能上传图片显示了，这里不多说介绍，上传图片的原理都差不多。<br>接下来说下给图片加水印的操作，在激烈的碰撞中，发现可以通过用Canvas，给图片上水印(本次是通过后台接口生成的)，之后慢慢的预研了一波。</p>\n<p><strong>前端图片加水印原理很简单，主要分为下面几步：</strong></p>\n<ol>\n<li>将需要添加水印的图片绘制到 canvas 上</li>\n<li>将水印图片绘制到 canvas 上</li>\n<li>将 canvas 的内容导出为图片</li>\n</ol>\n<h3 id=\"前期学习\"><a href=\"#前期学习\" class=\"headerlink\" title=\"前期学习\"></a><a href=\"#%E5%89%8D%E6%9C%9F%E5%AD%A6%E4%B9%A0\" title=\"前期学习\"></a>前期学习</h3><p> 使用canvas在前端实现图片水印合成</p>\n<p>  1.在底图上加上想要的水印，核心代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123456789101112// 获取当前 canvas 的上下文环境，用来操作在 canvas 上绘制内容const ctx = canvas.getContext(&#x27;2d&#x27;)// 向 canvas 上绘制图片// image 为一个图片对象// x 为绘制图片的横向起始位置，y 为绘制图片的纵向起始位置// width 为要绘制在 canvas 上宽度， height 为高度// 该方法最多可接受 9 个参数，从而实现剪裁的效果，但是与本篇内容无关，感兴趣的小伙伴可以搜索该方法ctx.drawImage(image, x, y, width, height)// 将 canvas 上的内容导出为 base64 格式的字符串，导出后可以直接赋值给 Image 对象的 src 属性// 第一个参数为导出的图片格式，可接受第二个参数（小于或等于 1 的数，表示导出图片的压缩比率）canvas.toDataURL(&quot;image/png&quot;)context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</span><br></pre></td></tr></table></figure>\n\n<p><strong>drawImage接受参数示意</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>img</td>\n<td>用来被绘制的图像、画布或视频</td>\n</tr>\n<tr>\n<td>sx</td>\n<td>可选。img被绘制区域的起始左上x坐标。</td>\n</tr>\n<tr>\n<td>sy</td>\n<td>可选。img被绘制区域的起始左上y坐标。</td>\n</tr>\n<tr>\n<td>swidth</td>\n<td>可选。img被绘制区域的宽度（如果没有后面的width或height参数，则可以伸展或缩小图像）。</td>\n</tr>\n<tr>\n<td>sheight</td>\n<td>可选。img被绘制区域的高度（如果没有后面的width或height参数，则可以伸展或缩小图像）。</td>\n</tr>\n<tr>\n<td>x</td>\n<td>画布上放置img的起始x坐标。</td>\n</tr>\n<tr>\n<td>y</td>\n<td>画布上放置img的起始y坐标。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>可选。画布上放置img提供的宽度（可能会有图片剪裁效果）。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>可选。画布上放置img提供的高度（可能会有图片剪裁效果）。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>步骤</p>\n</blockquote>\n<p> 1、本地图片转成Base64<br> 在onChange 上传图片 直接获取到的对象包含了base64格式的图片数据，如图：<br><img src=\"/img/shuiyin1.png\"></p>\n<p> 2、使用H5 <code>FlieReader</code> 读取base64格式的图片数据，将图片数据赋值给image 对象  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reader = new FileReader();</span><br><span class=\"line\">       reader.readAsDataURL(files);</span><br><span class=\"line\">       reader.onload = (e) =&gt; {</span><br><span class=\"line\">           const img = document.createElement('img');</span><br><span class=\"line\">           img.src = reader.result;</span><br><span class=\"line\">           }</span><br></pre></td></tr></tbody></table>\n\n<p> 3、调用canvas元素画布上下文对象的drawImage方法即可实现将img内容绘制到画布  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const canvas = document.createElement('canvas');</span><br><span class=\"line\">  // 设置画布高宽</span><br><span class=\"line\">  canvas.width = img.width</span><br><span class=\"line\">  canvas.height = img.height</span><br><span class=\"line\">  let ctx = canvas.getContext('2d')</span><br><span class=\"line\">  ctx.drawImage(img, 0, 0)</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p><strong>drawImage</strong>这个方法可以传入多个参数（楼上已经述说过了），以定义绘制的图像的范围，这里传入的0, 0定义从图像左上角开始绘制，后面可以继续传入两个参数来定义图像的绘制终点，不过这里整个图片都要绘制到canvas，所以采用默认值即可。注意点：要设置画布的高宽，到时候图片需要平铺到整个画布上，不加 的话 大图会被裁剪掉。</p>\n</blockquote>\n<p> 4、在画布上添加水印并借助canvas的<code>toDataURL()</code>方法把我们的canvas画布转换成base64无损PNG地址，这里就可以按照canvas的Api进行水印的操作</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置填充字号和字体，样式</span><br><span class=\"line\">   ctx.font = \"24px 宋体\"</span><br><span class=\"line\">   ctx.fillStyle = \"#FFC82C\"</span><br><span class=\"line\">   // 设置右对齐</span><br><span class=\"line\">   ctx.textAlign = 'right'</span><br><span class=\"line\">   // 在指定位置绘制文字，这里指定距离右下角20坐标的地方</span><br><span class=\"line\">   ctx.fillText('HOSJOY', canvas.width - 20, canvas.height - 20)</span><br><span class=\"line\">   canvas.toDataURL(\"image/png\")</span><br></pre></td></tr></tbody></table>\n\n<p> 5、Demo完整代码如下：  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reader = new FileReader();</span><br><span class=\"line\">       reader.readAsDataURL(files);</span><br><span class=\"line\">       reader.onload = (e) =&gt; {</span><br><span class=\"line\">           const img = document.createElement('img');</span><br><span class=\"line\">           img.src = reader.result;</span><br><span class=\"line\">           const canvas = document.createElement('canvas');</span><br><span class=\"line\">           // 如何获取图片高度 宽度</span><br><span class=\"line\"></span><br><span class=\"line\">           var size = 100;</span><br><span class=\"line\">           img.onload = async () =&gt; {</span><br><span class=\"line\">               console.log(22, img.width)</span><br><span class=\"line\">               const ctx = canvas.getContext('2d');</span><br><span class=\"line\">               canvas.width = img.width;</span><br><span class=\"line\">               canvas.height = img.height;</span><br><span class=\"line\">               ctx.drawImage(img, 0, 0);</span><br><span class=\"line\">               // ctx.drawImage(img,  0, 0, size, size, 0,0, size, size); 图片水印</span><br><span class=\"line\">               ctx.fillStyle = 'white';</span><br><span class=\"line\">               ctx.textBaseline = 'middle';</span><br><span class=\"line\">               ctx.font =\"24px 宋体\"</span><br><span class=\"line\">               ctx.fillText('Hello HOSJOY', 20, 20);</span><br><span class=\"line\">               // canvas.toBlob(resolve);</span><br><span class=\"line\">               // this.setState({</span><br><span class=\"line\">               //     attachmentUrl: this.state.attachmentUrl.concat({</span><br><span class=\"line\">               //         url: canvas.toDataURL(\"image/png\"),  // 生成base64的图片地址</span><br><span class=\"line\">               //     })</span><br><span class=\"line\">               // })</span><br><span class=\"line\">               const fileNew = canvas.toDataURL(\"image/png\")</span><br><span class=\"line\">              /这里执行后台上传接口</span><br><span class=\"line\">           }</span><br><span class=\"line\">       }</span><br></pre></td></tr></tbody></table>\n\n<p> 这样就完整地给图片添加了水印效果，下面看一下实际效果，最终结果：<br><img src=\"/img/shuiyin2.png\"></p>\n<blockquote>\n<p>总结</p>\n<blockquote>\n<p>前端给一个图片做简单的水印，canvas提供的一些API其实很有用，前端利用canvas的drawImage()可以实现对图片进行压缩，不妨大家可以试试,既然已经看到了最后，就请你伸出有魔力的手指点个关注吧！谢谢啦</p>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>近期项目需要做一个 定位打卡，拍照加上水印的功能，项目是用的react+Ant mobile</p>\n</blockquote>\n<p>  选用了 ImagePicker 图片选择器，代码如下</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ImagePicker</span><br><span class=\"line\">    length={4}</span><br><span class=\"line\">    disableDelete={true}</span><br><span class=\"line\">    files={this.state.attachmentUrl}</span><br><span class=\"line\">    onChange={this.onChangeFiles}</span><br><span class=\"line\">    onImageClick={(index, fs) =&gt; this.openViewer(index, fs)}</span><br><span class=\"line\">    selectable={this.state.attachmentUrl.length &lt; 20}</span><br><span class=\"line\">    multiple={this.state.multiple}</span><br><span class=\"line\">    capture=\"camera\"  // 只支持 相机拍照</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></tbody></table>\n\n<p>  在onChange 里面调用方法，就能上传图片显示了，这里不多说介绍，上传图片的原理都差不多。<br>接下来说下给图片加水印的操作，在激烈的碰撞中，发现可以通过用Canvas，给图片上水印(本次是通过后台接口生成的)，之后慢慢的预研了一波。</p>\n<p><strong>前端图片加水印原理很简单，主要分为下面几步：</strong></p>\n<ol>\n<li>将需要添加水印的图片绘制到 canvas 上</li>\n<li>将水印图片绘制到 canvas 上</li>\n<li>将 canvas 的内容导出为图片</li>\n</ol>\n<h3 id=\"前期学习\"><a href=\"#前期学习\" class=\"headerlink\" title=\"前期学习\"></a><a href=\"#%E5%89%8D%E6%9C%9F%E5%AD%A6%E4%B9%A0\" title=\"前期学习\"></a>前期学习</h3><p> 使用canvas在前端实现图片水印合成</p>\n<p>  1.在底图上加上想要的水印，核心代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123456789101112// 获取当前 canvas 的上下文环境，用来操作在 canvas 上绘制内容const ctx = canvas.getContext(&#x27;2d&#x27;)// 向 canvas 上绘制图片// image 为一个图片对象// x 为绘制图片的横向起始位置，y 为绘制图片的纵向起始位置// width 为要绘制在 canvas 上宽度， height 为高度// 该方法最多可接受 9 个参数，从而实现剪裁的效果，但是与本篇内容无关，感兴趣的小伙伴可以搜索该方法ctx.drawImage(image, x, y, width, height)// 将 canvas 上的内容导出为 base64 格式的字符串，导出后可以直接赋值给 Image 对象的 src 属性// 第一个参数为导出的图片格式，可接受第二个参数（小于或等于 1 的数，表示导出图片的压缩比率）canvas.toDataURL(&quot;image/png&quot;)context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</span><br></pre></td></tr></table></figure>\n\n<p><strong>drawImage接受参数示意</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>img</td>\n<td>用来被绘制的图像、画布或视频</td>\n</tr>\n<tr>\n<td>sx</td>\n<td>可选。img被绘制区域的起始左上x坐标。</td>\n</tr>\n<tr>\n<td>sy</td>\n<td>可选。img被绘制区域的起始左上y坐标。</td>\n</tr>\n<tr>\n<td>swidth</td>\n<td>可选。img被绘制区域的宽度（如果没有后面的width或height参数，则可以伸展或缩小图像）。</td>\n</tr>\n<tr>\n<td>sheight</td>\n<td>可选。img被绘制区域的高度（如果没有后面的width或height参数，则可以伸展或缩小图像）。</td>\n</tr>\n<tr>\n<td>x</td>\n<td>画布上放置img的起始x坐标。</td>\n</tr>\n<tr>\n<td>y</td>\n<td>画布上放置img的起始y坐标。</td>\n</tr>\n<tr>\n<td>width</td>\n<td>可选。画布上放置img提供的宽度（可能会有图片剪裁效果）。</td>\n</tr>\n<tr>\n<td>height</td>\n<td>可选。画布上放置img提供的高度（可能会有图片剪裁效果）。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>步骤</p>\n</blockquote>\n<p> 1、本地图片转成Base64<br> 在onChange 上传图片 直接获取到的对象包含了base64格式的图片数据，如图：<br><img src=\"/img/shuiyin1.png\"></p>\n<p> 2、使用H5 <code>FlieReader</code> 读取base64格式的图片数据，将图片数据赋值给image 对象  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reader = new FileReader();</span><br><span class=\"line\">       reader.readAsDataURL(files);</span><br><span class=\"line\">       reader.onload = (e) =&gt; {</span><br><span class=\"line\">           const img = document.createElement('img');</span><br><span class=\"line\">           img.src = reader.result;</span><br><span class=\"line\">           }</span><br></pre></td></tr></tbody></table>\n\n<p> 3、调用canvas元素画布上下文对象的drawImage方法即可实现将img内容绘制到画布  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const canvas = document.createElement('canvas');</span><br><span class=\"line\">  // 设置画布高宽</span><br><span class=\"line\">  canvas.width = img.width</span><br><span class=\"line\">  canvas.height = img.height</span><br><span class=\"line\">  let ctx = canvas.getContext('2d')</span><br><span class=\"line\">  ctx.drawImage(img, 0, 0)</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p><strong>drawImage</strong>这个方法可以传入多个参数（楼上已经述说过了），以定义绘制的图像的范围，这里传入的0, 0定义从图像左上角开始绘制，后面可以继续传入两个参数来定义图像的绘制终点，不过这里整个图片都要绘制到canvas，所以采用默认值即可。注意点：要设置画布的高宽，到时候图片需要平铺到整个画布上，不加 的话 大图会被裁剪掉。</p>\n</blockquote>\n<p> 4、在画布上添加水印并借助canvas的<code>toDataURL()</code>方法把我们的canvas画布转换成base64无损PNG地址，这里就可以按照canvas的Api进行水印的操作</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 设置填充字号和字体，样式</span><br><span class=\"line\">   ctx.font = \"24px 宋体\"</span><br><span class=\"line\">   ctx.fillStyle = \"#FFC82C\"</span><br><span class=\"line\">   // 设置右对齐</span><br><span class=\"line\">   ctx.textAlign = 'right'</span><br><span class=\"line\">   // 在指定位置绘制文字，这里指定距离右下角20坐标的地方</span><br><span class=\"line\">   ctx.fillText('HOSJOY', canvas.width - 20, canvas.height - 20)</span><br><span class=\"line\">   canvas.toDataURL(\"image/png\")</span><br></pre></td></tr></tbody></table>\n\n<p> 5、Demo完整代码如下：  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const reader = new FileReader();</span><br><span class=\"line\">       reader.readAsDataURL(files);</span><br><span class=\"line\">       reader.onload = (e) =&gt; {</span><br><span class=\"line\">           const img = document.createElement('img');</span><br><span class=\"line\">           img.src = reader.result;</span><br><span class=\"line\">           const canvas = document.createElement('canvas');</span><br><span class=\"line\">           // 如何获取图片高度 宽度</span><br><span class=\"line\"></span><br><span class=\"line\">           var size = 100;</span><br><span class=\"line\">           img.onload = async () =&gt; {</span><br><span class=\"line\">               console.log(22, img.width)</span><br><span class=\"line\">               const ctx = canvas.getContext('2d');</span><br><span class=\"line\">               canvas.width = img.width;</span><br><span class=\"line\">               canvas.height = img.height;</span><br><span class=\"line\">               ctx.drawImage(img, 0, 0);</span><br><span class=\"line\">               // ctx.drawImage(img,  0, 0, size, size, 0,0, size, size); 图片水印</span><br><span class=\"line\">               ctx.fillStyle = 'white';</span><br><span class=\"line\">               ctx.textBaseline = 'middle';</span><br><span class=\"line\">               ctx.font =\"24px 宋体\"</span><br><span class=\"line\">               ctx.fillText('Hello HOSJOY', 20, 20);</span><br><span class=\"line\">               // canvas.toBlob(resolve);</span><br><span class=\"line\">               // this.setState({</span><br><span class=\"line\">               //     attachmentUrl: this.state.attachmentUrl.concat({</span><br><span class=\"line\">               //         url: canvas.toDataURL(\"image/png\"),  // 生成base64的图片地址</span><br><span class=\"line\">               //     })</span><br><span class=\"line\">               // })</span><br><span class=\"line\">               const fileNew = canvas.toDataURL(\"image/png\")</span><br><span class=\"line\">              /这里执行后台上传接口</span><br><span class=\"line\">           }</span><br><span class=\"line\">       }</span><br></pre></td></tr></tbody></table>\n\n<p> 这样就完整地给图片添加了水印效果，下面看一下实际效果，最终结果：<br><img src=\"/img/shuiyin2.png\"></p>\n<blockquote>\n<p>总结</p>\n<blockquote>\n<p>前端给一个图片做简单的水印，canvas提供的一些API其实很有用，前端利用canvas的drawImage()可以实现对图片进行压缩，不妨大家可以试试,既然已经看到了最后，就请你伸出有魔力的手指点个关注吧！谢谢啦</p>\n</blockquote>\n</blockquote>\n"},{"title":"数据解构","date":"2023-01-11T07:10:20.000Z","_content":"### [](#ES6—数据解构 \"ES6—数据解构\")ES6—数据解构\n\n> 来同质化的代码 解构赋值表达式的值与表达式右侧(也就是=右侧)的值相等，如此一来，在任何可以使用值的地方都可以使用解构赋值表达式  \n> –对应，有就有 没有就不存在\n\n#### [](#对象解构 \"对象解构\")对象解构\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type, value, name} = myObj</span><br><span class=\"line\">console.log(type)  //</span><br><span class=\"line\">console.log(value) //</span><br><span class=\"line\">console.log(name)  // undefined</span><br></pre></td></tr></tbody></table>\n\n> 如果使用var、let、const解构声明变量，必须要提供初始化程序（也就是等号右侧的值），否则会导致程序抛出语法错误\n\n* * *\n\n> 解构出来的变量 一定要是 对象中能够查找到的属性名 当指定的属性不存在时，可以随意定义一个默认值，在属性名称后添加一个等号(=)和相应的默认值即可 (直接定义个默认值)  \n> 如果解构出来的属性在对象中查找不到，值为undefined\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type, value, name='姓名'} = myObj</span><br><span class=\"line\">console.log(type)  //</span><br><span class=\"line\">console.log(value) //</span><br><span class=\"line\">console.log(name)  //  姓名</span><br></pre></td></tr></tbody></table>\n\n* * *\n\n> 解构出来的变量虽然是跟属性名称相同，但是他不再是属性，而是外部的变量，这个变量名也可以被修改， 不一定要跟属性同名  \n> 上面的都是同名的变量 为非同名局部变量赋值  \n> 假如想要换个变量 右边 大括号里面 重新申明下 xx:oo 旧的名称 : 新的名称\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type:localType, value:localTValue} = myObj</span><br><span class=\"line\">console.log(localType)  //</span><br><span class=\"line\">console.log(localTValue) //</span><br></pre></td></tr></tbody></table>\n\n#### [](#嵌套对象解构 \"嵌套对象解构\")嵌套对象解构\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge',</span><br><span class=\"line\">    child:{</span><br><span class=\"line\">        firstObj:{</span><br><span class=\"line\">            childType:'sex',</span><br><span class=\"line\">            childValue:'nan'</span><br><span class=\"line\">        },</span><br><span class=\"line\">        secondObj:{</span><br><span class=\"line\">            childType:'sex',</span><br><span class=\"line\">            childValue:'nv'</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">let {child:{firstObj:newObj}} = myObj</span><br><span class=\"line\">console.log(newObj)  //</span><br></pre></td></tr></tbody></table>\n\n> 先找一层 在进一层找 可以 点 属性获取值\n\n#### [](#数组解构 \"数组解构\")数组解构\n\n> 为需要的元素提供变量名\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue']</span><br><span class=\"line\">let [firstColor,secondColor] = colors;</span><br><span class=\"line\">console.log(firstColor);//\"red\"</span><br><span class=\"line\">console.log(secondColor);//\"green\"</span><br><span class=\"line\"></span><br><span class=\"line\">对于不需要的解构的值</span><br><span class=\"line\"></span><br><span class=\"line\">let [ , ,thirdColor] = colors</span><br><span class=\"line\">console.log(thirdColor);</span><br></pre></td></tr></tbody></table>\n\n> 如果我们先声明了变量，之后也可以直接通过解构赋值修改变量的值。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue'],firstColor = 'black',secondColor = 'yellow';</span><br><span class=\"line\">[firstColor,secondColor] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstColor);//\"red\"</span><br><span class=\"line\">console.log(secondColor);//\"green\"</span><br></pre></td></tr></tbody></table>\n\n> 可以在数组解构赋值表达式中为任意变量添加默认值。注意：：：：只有当该位置在右侧数组中的值不存在时或值为undefined时，默认值才会生效。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue'];</span><br><span class=\"line\">[firstColor,secondColor,thirdColor='orange'] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstColor);//\"\"</span><br><span class=\"line\">console.log(secondColor);//\"\"</span><br><span class=\"line\">console.log(thirdColor);//\"\"</span><br></pre></td></tr></tbody></table>\n\n#### [](#嵌套数组解构赋值 \"嵌套数组解构赋值\")嵌套数组解构赋值\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, [ 20, 30 ], 40 ];</span><br><span class=\"line\">console.log( arr[1][1] ); //30</span><br><span class=\"line\"></span><br><span class=\"line\">let [ one, two, three, four ] = arr;</span><br><span class=\"line\">console.log( one, two, three, four ); //</span><br><span class=\"line\"></span><br><span class=\"line\">[ one, [ two, three ], four ] = arr; //</span><br><span class=\"line\">console.log( one, two, three, four ); //10 20 30 40</span><br></pre></td></tr></tbody></table>\n\n#### [](#字符串的解构赋值 \"字符串的解构赋值\")字符串的解构赋值\n\n> 字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [a, b, c, d, e] = 'hello';</span><br><span class=\"line\">a // \"h\"</span><br><span class=\"line\">b // \"e\"</span><br><span class=\"line\">c // \"l\"</span><br><span class=\"line\">d // \"l\"</span><br><span class=\"line\">e // \"o\"</span><br></pre></td></tr></tbody></table>\n\n> 类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let {length : len} = 'hello';</span><br><span class=\"line\">len // 5</span><br></pre></td></tr></tbody></table>\n\n#### [](#数值和布尔值的解构赋值 \"数值和布尔值的解构赋值\")数值和布尔值的解构赋值\n\n> 解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。  \n> \n> <table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let {toString: s} = 123;</span><br><span class=\"line\">s === Number.prototype.toString // true</span><br><span class=\"line\"></span><br><span class=\"line\">let {toString: s} = true;</span><br><span class=\"line\">s === Boolean.prototype.toString // true</span><br></pre></td></tr></tbody></table>\n\n> 上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。\n\n> 解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let { prop: x } = undefined; // TypeError</span><br><span class=\"line\">let { prop: y } = null; // TypeError</span><br></pre></td></tr></tbody></table>\n\n#### [](#解构交换变量值 \"解构交换变量值\")解构交换变量值\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a =10 , b = 8;</span><br><span class=\"line\">[a,b]=[b,a]</span><br><span class=\"line\">console.log(a,b)</span><br></pre></td></tr></tbody></table>\n\n#### [](#解构中的不定参数-… \"解构中的不定参数(…)\")解构中的不定参数(…)\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr =[10,20,30]</span><br><span class=\"line\">let [first,...others ] = arr</span><br><span class=\"line\">console.log(first,others)</span><br></pre></td></tr></tbody></table>\n\n> 复制数组\n\nES5  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, 20, 30 ];</span><br><span class=\"line\">let newArr = arr.concat();</span><br><span class=\"line\">console.log( newArr );</span><br></pre></td></tr></tbody></table>\n\n> 用解构与不定参数结合 复制 数组\n\nES6\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, 20, 30 ];</span><br><span class=\"line\">let [...newArr] = arr;</span><br><span class=\"line\">console.log( newArr );</span><br></pre></td></tr></tbody></table>\n\n#### [](#解构表达式传参 \"解构表达式传参\")解构表达式传参\n\n> 方法 可以接受 解构表达式\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function show ({name,age}){</span><br><span class=\"line\">    console.log(name,age)</span><br><span class=\"line\">}</span><br><span class=\"line\">let obj = {</span><br><span class=\"line\">    name:'yongge',</span><br><span class=\"line\">    age:'28'</span><br><span class=\"line\">}</span><br><span class=\"line\">show (obj)    //函数里面可以写成表达式 {name，age} = obj</span><br><span class=\"line\"></span><br><span class=\"line\">function add([x, y]){</span><br><span class=\"line\">return x + y;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">add([1, 2]); // 3</span><br></pre></td></tr></tbody></table>\n\n> 函数show,add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。","source":"_posts/数据解构.md","raw":"---\ntitle: 数据解构\ndate: 2023-01-11 15:10:20\ntags:\n---\n### [](#ES6—数据解构 \"ES6—数据解构\")ES6—数据解构\n\n> 来同质化的代码 解构赋值表达式的值与表达式右侧(也就是=右侧)的值相等，如此一来，在任何可以使用值的地方都可以使用解构赋值表达式  \n> –对应，有就有 没有就不存在\n\n#### [](#对象解构 \"对象解构\")对象解构\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type, value, name} = myObj</span><br><span class=\"line\">console.log(type)  //</span><br><span class=\"line\">console.log(value) //</span><br><span class=\"line\">console.log(name)  // undefined</span><br></pre></td></tr></tbody></table>\n\n> 如果使用var、let、const解构声明变量，必须要提供初始化程序（也就是等号右侧的值），否则会导致程序抛出语法错误\n\n* * *\n\n> 解构出来的变量 一定要是 对象中能够查找到的属性名 当指定的属性不存在时，可以随意定义一个默认值，在属性名称后添加一个等号(=)和相应的默认值即可 (直接定义个默认值)  \n> 如果解构出来的属性在对象中查找不到，值为undefined\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type, value, name='姓名'} = myObj</span><br><span class=\"line\">console.log(type)  //</span><br><span class=\"line\">console.log(value) //</span><br><span class=\"line\">console.log(name)  //  姓名</span><br></pre></td></tr></tbody></table>\n\n* * *\n\n> 解构出来的变量虽然是跟属性名称相同，但是他不再是属性，而是外部的变量，这个变量名也可以被修改， 不一定要跟属性同名  \n> 上面的都是同名的变量 为非同名局部变量赋值  \n> 假如想要换个变量 右边 大括号里面 重新申明下 xx:oo 旧的名称 : 新的名称\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type:localType, value:localTValue} = myObj</span><br><span class=\"line\">console.log(localType)  //</span><br><span class=\"line\">console.log(localTValue) //</span><br></pre></td></tr></tbody></table>\n\n#### [](#嵌套对象解构 \"嵌套对象解构\")嵌套对象解构\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge',</span><br><span class=\"line\">    child:{</span><br><span class=\"line\">        firstObj:{</span><br><span class=\"line\">            childType:'sex',</span><br><span class=\"line\">            childValue:'nan'</span><br><span class=\"line\">        },</span><br><span class=\"line\">        secondObj:{</span><br><span class=\"line\">            childType:'sex',</span><br><span class=\"line\">            childValue:'nv'</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">let {child:{firstObj:newObj}} = myObj</span><br><span class=\"line\">console.log(newObj)  //</span><br></pre></td></tr></tbody></table>\n\n> 先找一层 在进一层找 可以 点 属性获取值\n\n#### [](#数组解构 \"数组解构\")数组解构\n\n> 为需要的元素提供变量名\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue']</span><br><span class=\"line\">let [firstColor,secondColor] = colors;</span><br><span class=\"line\">console.log(firstColor);//\"red\"</span><br><span class=\"line\">console.log(secondColor);//\"green\"</span><br><span class=\"line\"></span><br><span class=\"line\">对于不需要的解构的值</span><br><span class=\"line\"></span><br><span class=\"line\">let [ , ,thirdColor] = colors</span><br><span class=\"line\">console.log(thirdColor);</span><br></pre></td></tr></tbody></table>\n\n> 如果我们先声明了变量，之后也可以直接通过解构赋值修改变量的值。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue'],firstColor = 'black',secondColor = 'yellow';</span><br><span class=\"line\">[firstColor,secondColor] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstColor);//\"red\"</span><br><span class=\"line\">console.log(secondColor);//\"green\"</span><br></pre></td></tr></tbody></table>\n\n> 可以在数组解构赋值表达式中为任意变量添加默认值。注意：：：：只有当该位置在右侧数组中的值不存在时或值为undefined时，默认值才会生效。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue'];</span><br><span class=\"line\">[firstColor,secondColor,thirdColor='orange'] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstColor);//\"\"</span><br><span class=\"line\">console.log(secondColor);//\"\"</span><br><span class=\"line\">console.log(thirdColor);//\"\"</span><br></pre></td></tr></tbody></table>\n\n#### [](#嵌套数组解构赋值 \"嵌套数组解构赋值\")嵌套数组解构赋值\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, [ 20, 30 ], 40 ];</span><br><span class=\"line\">console.log( arr[1][1] ); //30</span><br><span class=\"line\"></span><br><span class=\"line\">let [ one, two, three, four ] = arr;</span><br><span class=\"line\">console.log( one, two, three, four ); //</span><br><span class=\"line\"></span><br><span class=\"line\">[ one, [ two, three ], four ] = arr; //</span><br><span class=\"line\">console.log( one, two, three, four ); //10 20 30 40</span><br></pre></td></tr></tbody></table>\n\n#### [](#字符串的解构赋值 \"字符串的解构赋值\")字符串的解构赋值\n\n> 字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [a, b, c, d, e] = 'hello';</span><br><span class=\"line\">a // \"h\"</span><br><span class=\"line\">b // \"e\"</span><br><span class=\"line\">c // \"l\"</span><br><span class=\"line\">d // \"l\"</span><br><span class=\"line\">e // \"o\"</span><br></pre></td></tr></tbody></table>\n\n> 类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let {length : len} = 'hello';</span><br><span class=\"line\">len // 5</span><br></pre></td></tr></tbody></table>\n\n#### [](#数值和布尔值的解构赋值 \"数值和布尔值的解构赋值\")数值和布尔值的解构赋值\n\n> 解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。  \n> \n> <table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let {toString: s} = 123;</span><br><span class=\"line\">s === Number.prototype.toString // true</span><br><span class=\"line\"></span><br><span class=\"line\">let {toString: s} = true;</span><br><span class=\"line\">s === Boolean.prototype.toString // true</span><br></pre></td></tr></tbody></table>\n\n> 上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。\n\n> 解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let { prop: x } = undefined; // TypeError</span><br><span class=\"line\">let { prop: y } = null; // TypeError</span><br></pre></td></tr></tbody></table>\n\n#### [](#解构交换变量值 \"解构交换变量值\")解构交换变量值\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a =10 , b = 8;</span><br><span class=\"line\">[a,b]=[b,a]</span><br><span class=\"line\">console.log(a,b)</span><br></pre></td></tr></tbody></table>\n\n#### [](#解构中的不定参数-… \"解构中的不定参数(…)\")解构中的不定参数(…)\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr =[10,20,30]</span><br><span class=\"line\">let [first,...others ] = arr</span><br><span class=\"line\">console.log(first,others)</span><br></pre></td></tr></tbody></table>\n\n> 复制数组\n\nES5  \n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, 20, 30 ];</span><br><span class=\"line\">let newArr = arr.concat();</span><br><span class=\"line\">console.log( newArr );</span><br></pre></td></tr></tbody></table>\n\n> 用解构与不定参数结合 复制 数组\n\nES6\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, 20, 30 ];</span><br><span class=\"line\">let [...newArr] = arr;</span><br><span class=\"line\">console.log( newArr );</span><br></pre></td></tr></tbody></table>\n\n#### [](#解构表达式传参 \"解构表达式传参\")解构表达式传参\n\n> 方法 可以接受 解构表达式\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function show ({name,age}){</span><br><span class=\"line\">    console.log(name,age)</span><br><span class=\"line\">}</span><br><span class=\"line\">let obj = {</span><br><span class=\"line\">    name:'yongge',</span><br><span class=\"line\">    age:'28'</span><br><span class=\"line\">}</span><br><span class=\"line\">show (obj)    //函数里面可以写成表达式 {name，age} = obj</span><br><span class=\"line\"></span><br><span class=\"line\">function add([x, y]){</span><br><span class=\"line\">return x + y;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">add([1, 2]); // 3</span><br></pre></td></tr></tbody></table>\n\n> 函数show,add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。","slug":"数据解构","published":1,"updated":"2023-01-11T07:10:56.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcrcceaw0003dfq3fmvgf9yp","content":"<h3 id=\"ES6—数据解构\"><a href=\"#ES6—数据解构\" class=\"headerlink\" title=\"ES6—数据解构\"></a><a href=\"#ES6%E2%80%94%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%84\" title=\"ES6—数据解构\"></a>ES6—数据解构</h3><blockquote>\n<p>来同质化的代码 解构赋值表达式的值与表达式右侧(也就是&#x3D;右侧)的值相等，如此一来，在任何可以使用值的地方都可以使用解构赋值表达式<br>–对应，有就有 没有就不存在</p>\n</blockquote>\n<h4 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a><a href=\"#%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84\" title=\"对象解构\"></a>对象解构</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type, value, name} = myObj</span><br><span class=\"line\">console.log(type)  //</span><br><span class=\"line\">console.log(value) //</span><br><span class=\"line\">console.log(name)  // undefined</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>如果使用var、let、const解构声明变量，必须要提供初始化程序（也就是等号右侧的值），否则会导致程序抛出语法错误</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>解构出来的变量 一定要是 对象中能够查找到的属性名 当指定的属性不存在时，可以随意定义一个默认值，在属性名称后添加一个等号(&#x3D;)和相应的默认值即可 (直接定义个默认值)<br>如果解构出来的属性在对象中查找不到，值为undefined</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type, value, name='姓名'} = myObj</span><br><span class=\"line\">console.log(type)  //</span><br><span class=\"line\">console.log(value) //</span><br><span class=\"line\">console.log(name)  //  姓名</span><br></pre></td></tr></tbody></table>\n\n<hr>\n<blockquote>\n<p>解构出来的变量虽然是跟属性名称相同，但是他不再是属性，而是外部的变量，这个变量名也可以被修改， 不一定要跟属性同名<br>上面的都是同名的变量 为非同名局部变量赋值<br>假如想要换个变量 右边 大括号里面 重新申明下 xx:oo 旧的名称 : 新的名称</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type:localType, value:localTValue} = myObj</span><br><span class=\"line\">console.log(localType)  //</span><br><span class=\"line\">console.log(localTValue) //</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"嵌套对象解构\"><a href=\"#嵌套对象解构\" class=\"headerlink\" title=\"嵌套对象解构\"></a><a href=\"#%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84\" title=\"嵌套对象解构\"></a>嵌套对象解构</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge',</span><br><span class=\"line\">    child:{</span><br><span class=\"line\">        firstObj:{</span><br><span class=\"line\">            childType:'sex',</span><br><span class=\"line\">            childValue:'nan'</span><br><span class=\"line\">        },</span><br><span class=\"line\">        secondObj:{</span><br><span class=\"line\">            childType:'sex',</span><br><span class=\"line\">            childValue:'nv'</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">let {child:{firstObj:newObj}} = myObj</span><br><span class=\"line\">console.log(newObj)  //</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>先找一层 在进一层找 可以 点 属性获取值</p>\n</blockquote>\n<h4 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a><a href=\"#%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84\" title=\"数组解构\"></a>数组解构</h4><blockquote>\n<p>为需要的元素提供变量名</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue']</span><br><span class=\"line\">let [firstColor,secondColor] = colors;</span><br><span class=\"line\">console.log(firstColor);//\"red\"</span><br><span class=\"line\">console.log(secondColor);//\"green\"</span><br><span class=\"line\"></span><br><span class=\"line\">对于不需要的解构的值</span><br><span class=\"line\"></span><br><span class=\"line\">let [ , ,thirdColor] = colors</span><br><span class=\"line\">console.log(thirdColor);</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>如果我们先声明了变量，之后也可以直接通过解构赋值修改变量的值。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue'],firstColor = 'black',secondColor = 'yellow';</span><br><span class=\"line\">[firstColor,secondColor] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstColor);//\"red\"</span><br><span class=\"line\">console.log(secondColor);//\"green\"</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>可以在数组解构赋值表达式中为任意变量添加默认值。注意：：：：只有当该位置在右侧数组中的值不存在时或值为undefined时，默认值才会生效。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue'];</span><br><span class=\"line\">[firstColor,secondColor,thirdColor='orange'] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstColor);//\"\"</span><br><span class=\"line\">console.log(secondColor);//\"\"</span><br><span class=\"line\">console.log(thirdColor);//\"\"</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"嵌套数组解构赋值\"><a href=\"#嵌套数组解构赋值\" class=\"headerlink\" title=\"嵌套数组解构赋值\"></a><a href=\"#%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\" title=\"嵌套数组解构赋值\"></a>嵌套数组解构赋值</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, [ 20, 30 ], 40 ];</span><br><span class=\"line\">console.log( arr[1][1] ); //30</span><br><span class=\"line\"></span><br><span class=\"line\">let [ one, two, three, four ] = arr;</span><br><span class=\"line\">console.log( one, two, three, four ); //</span><br><span class=\"line\"></span><br><span class=\"line\">[ one, [ two, three ], four ] = arr; //</span><br><span class=\"line\">console.log( one, two, three, four ); //10 20 30 40</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h4><blockquote>\n<p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [a, b, c, d, e] = 'hello';</span><br><span class=\"line\">a // \"h\"</span><br><span class=\"line\">b // \"e\"</span><br><span class=\"line\">c // \"l\"</span><br><span class=\"line\">d // \"l\"</span><br><span class=\"line\">e // \"o\"</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let {length : len} = 'hello';</span><br><span class=\"line\">len // 5</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a><a href=\"#%E6%95%B0%E5%80%BC%E5%92%8C%E5%B8%83%E5%B0%94%E5%80%BC%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h4><blockquote>\n<p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let {toString: s} = 123;</span><br><span class=\"line\">s === Number.prototype.toString // true</span><br><span class=\"line\"></span><br><span class=\"line\">let {toString: s} = true;</span><br><span class=\"line\">s === Boolean.prototype.toString // true</span><br></pre></td></tr></tbody></table>\n</blockquote>\n<blockquote>\n<p>上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。</p>\n</blockquote>\n<blockquote>\n<p>解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let { prop: x } = undefined; // TypeError</span><br><span class=\"line\">let { prop: y } = null; // TypeError</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"解构交换变量值\"><a href=\"#解构交换变量值\" class=\"headerlink\" title=\"解构交换变量值\"></a><a href=\"#%E8%A7%A3%E6%9E%84%E4%BA%A4%E6%8D%A2%E5%8F%98%E9%87%8F%E5%80%BC\" title=\"解构交换变量值\"></a>解构交换变量值</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a =10 , b = 8;</span><br><span class=\"line\">[a,b]=[b,a]</span><br><span class=\"line\">console.log(a,b)</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"解构中的不定参数-…\"><a href=\"#解构中的不定参数-…\" class=\"headerlink\" title=\"解构中的不定参数(…)\"></a><a href=\"#%E8%A7%A3%E6%9E%84%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%AE%9A%E5%8F%82%E6%95%B0-%E2%80%A6\" title=\"解构中的不定参数(…)\"></a>解构中的不定参数(…)</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr =[10,20,30]</span><br><span class=\"line\">let [first,...others ] = arr</span><br><span class=\"line\">console.log(first,others)</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>复制数组</p>\n</blockquote>\n<p>ES5  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, 20, 30 ];</span><br><span class=\"line\">let newArr = arr.concat();</span><br><span class=\"line\">console.log( newArr );</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>用解构与不定参数结合 复制 数组</p>\n</blockquote>\n<p>ES6</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, 20, 30 ];</span><br><span class=\"line\">let [...newArr] = arr;</span><br><span class=\"line\">console.log( newArr );</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"解构表达式传参\"><a href=\"#解构表达式传参\" class=\"headerlink\" title=\"解构表达式传参\"></a><a href=\"#%E8%A7%A3%E6%9E%84%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BC%A0%E5%8F%82\" title=\"解构表达式传参\"></a>解构表达式传参</h4><blockquote>\n<p>方法 可以接受 解构表达式</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function show ({name,age}){</span><br><span class=\"line\">    console.log(name,age)</span><br><span class=\"line\">}</span><br><span class=\"line\">let obj = {</span><br><span class=\"line\">    name:'yongge',</span><br><span class=\"line\">    age:'28'</span><br><span class=\"line\">}</span><br><span class=\"line\">show (obj)    //函数里面可以写成表达式 {name，age} = obj</span><br><span class=\"line\"></span><br><span class=\"line\">function add([x, y]){</span><br><span class=\"line\">return x + y;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">add([1, 2]); // 3</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>函数show,add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ES6—数据解构\"><a href=\"#ES6—数据解构\" class=\"headerlink\" title=\"ES6—数据解构\"></a><a href=\"#ES6%E2%80%94%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%84\" title=\"ES6—数据解构\"></a>ES6—数据解构</h3><blockquote>\n<p>来同质化的代码 解构赋值表达式的值与表达式右侧(也就是&#x3D;右侧)的值相等，如此一来，在任何可以使用值的地方都可以使用解构赋值表达式<br>–对应，有就有 没有就不存在</p>\n</blockquote>\n<h4 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a><a href=\"#%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84\" title=\"对象解构\"></a>对象解构</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type, value, name} = myObj</span><br><span class=\"line\">console.log(type)  //</span><br><span class=\"line\">console.log(value) //</span><br><span class=\"line\">console.log(name)  // undefined</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>如果使用var、let、const解构声明变量，必须要提供初始化程序（也就是等号右侧的值），否则会导致程序抛出语法错误</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>解构出来的变量 一定要是 对象中能够查找到的属性名 当指定的属性不存在时，可以随意定义一个默认值，在属性名称后添加一个等号(&#x3D;)和相应的默认值即可 (直接定义个默认值)<br>如果解构出来的属性在对象中查找不到，值为undefined</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type, value, name='姓名'} = myObj</span><br><span class=\"line\">console.log(type)  //</span><br><span class=\"line\">console.log(value) //</span><br><span class=\"line\">console.log(name)  //  姓名</span><br></pre></td></tr></tbody></table>\n\n<hr>\n<blockquote>\n<p>解构出来的变量虽然是跟属性名称相同，但是他不再是属性，而是外部的变量，这个变量名也可以被修改， 不一定要跟属性同名<br>上面的都是同名的变量 为非同名局部变量赋值<br>假如想要换个变量 右边 大括号里面 重新申明下 xx:oo 旧的名称 : 新的名称</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let  myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\">let { type:localType, value:localTValue} = myObj</span><br><span class=\"line\">console.log(localType)  //</span><br><span class=\"line\">console.log(localTValue) //</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"嵌套对象解构\"><a href=\"#嵌套对象解构\" class=\"headerlink\" title=\"嵌套对象解构\"></a><a href=\"#%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1%E8%A7%A3%E6%9E%84\" title=\"嵌套对象解构\"></a>嵌套对象解构</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myObj = {</span><br><span class=\"line\">    type:'name',</span><br><span class=\"line\">    value:'yongge',</span><br><span class=\"line\">    child:{</span><br><span class=\"line\">        firstObj:{</span><br><span class=\"line\">            childType:'sex',</span><br><span class=\"line\">            childValue:'nan'</span><br><span class=\"line\">        },</span><br><span class=\"line\">        secondObj:{</span><br><span class=\"line\">            childType:'sex',</span><br><span class=\"line\">            childValue:'nv'</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\">let {child:{firstObj:newObj}} = myObj</span><br><span class=\"line\">console.log(newObj)  //</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>先找一层 在进一层找 可以 点 属性获取值</p>\n</blockquote>\n<h4 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a><a href=\"#%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84\" title=\"数组解构\"></a>数组解构</h4><blockquote>\n<p>为需要的元素提供变量名</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue']</span><br><span class=\"line\">let [firstColor,secondColor] = colors;</span><br><span class=\"line\">console.log(firstColor);//\"red\"</span><br><span class=\"line\">console.log(secondColor);//\"green\"</span><br><span class=\"line\"></span><br><span class=\"line\">对于不需要的解构的值</span><br><span class=\"line\"></span><br><span class=\"line\">let [ , ,thirdColor] = colors</span><br><span class=\"line\">console.log(thirdColor);</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>如果我们先声明了变量，之后也可以直接通过解构赋值修改变量的值。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue'],firstColor = 'black',secondColor = 'yellow';</span><br><span class=\"line\">[firstColor,secondColor] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstColor);//\"red\"</span><br><span class=\"line\">console.log(secondColor);//\"green\"</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>可以在数组解构赋值表达式中为任意变量添加默认值。注意：：：：只有当该位置在右侧数组中的值不存在时或值为undefined时，默认值才会生效。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let colors = ['red','green','blue'];</span><br><span class=\"line\">[firstColor,secondColor,thirdColor='orange'] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(firstColor);//\"\"</span><br><span class=\"line\">console.log(secondColor);//\"\"</span><br><span class=\"line\">console.log(thirdColor);//\"\"</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"嵌套数组解构赋值\"><a href=\"#嵌套数组解构赋值\" class=\"headerlink\" title=\"嵌套数组解构赋值\"></a><a href=\"#%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\" title=\"嵌套数组解构赋值\"></a>嵌套数组解构赋值</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, [ 20, 30 ], 40 ];</span><br><span class=\"line\">console.log( arr[1][1] ); //30</span><br><span class=\"line\"></span><br><span class=\"line\">let [ one, two, three, four ] = arr;</span><br><span class=\"line\">console.log( one, two, three, four ); //</span><br><span class=\"line\"></span><br><span class=\"line\">[ one, [ two, three ], four ] = arr; //</span><br><span class=\"line\">console.log( one, two, three, four ); //10 20 30 40</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h4><blockquote>\n<p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [a, b, c, d, e] = 'hello';</span><br><span class=\"line\">a // \"h\"</span><br><span class=\"line\">b // \"e\"</span><br><span class=\"line\">c // \"l\"</span><br><span class=\"line\">d // \"l\"</span><br><span class=\"line\">e // \"o\"</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let {length : len} = 'hello';</span><br><span class=\"line\">len // 5</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a><a href=\"#%E6%95%B0%E5%80%BC%E5%92%8C%E5%B8%83%E5%B0%94%E5%80%BC%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h4><blockquote>\n<p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let {toString: s} = 123;</span><br><span class=\"line\">s === Number.prototype.toString // true</span><br><span class=\"line\"></span><br><span class=\"line\">let {toString: s} = true;</span><br><span class=\"line\">s === Boolean.prototype.toString // true</span><br></pre></td></tr></tbody></table>\n</blockquote>\n<blockquote>\n<p>上面代码中，数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。</p>\n</blockquote>\n<blockquote>\n<p>解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let { prop: x } = undefined; // TypeError</span><br><span class=\"line\">let { prop: y } = null; // TypeError</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"解构交换变量值\"><a href=\"#解构交换变量值\" class=\"headerlink\" title=\"解构交换变量值\"></a><a href=\"#%E8%A7%A3%E6%9E%84%E4%BA%A4%E6%8D%A2%E5%8F%98%E9%87%8F%E5%80%BC\" title=\"解构交换变量值\"></a>解构交换变量值</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a =10 , b = 8;</span><br><span class=\"line\">[a,b]=[b,a]</span><br><span class=\"line\">console.log(a,b)</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"解构中的不定参数-…\"><a href=\"#解构中的不定参数-…\" class=\"headerlink\" title=\"解构中的不定参数(…)\"></a><a href=\"#%E8%A7%A3%E6%9E%84%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%AE%9A%E5%8F%82%E6%95%B0-%E2%80%A6\" title=\"解构中的不定参数(…)\"></a>解构中的不定参数(…)</h4><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr =[10,20,30]</span><br><span class=\"line\">let [first,...others ] = arr</span><br><span class=\"line\">console.log(first,others)</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>复制数组</p>\n</blockquote>\n<p>ES5  </p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, 20, 30 ];</span><br><span class=\"line\">let newArr = arr.concat();</span><br><span class=\"line\">console.log( newArr );</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>用解构与不定参数结合 复制 数组</p>\n</blockquote>\n<p>ES6</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let arr = [ 10, 20, 30 ];</span><br><span class=\"line\">let [...newArr] = arr;</span><br><span class=\"line\">console.log( newArr );</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"解构表达式传参\"><a href=\"#解构表达式传参\" class=\"headerlink\" title=\"解构表达式传参\"></a><a href=\"#%E8%A7%A3%E6%9E%84%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BC%A0%E5%8F%82\" title=\"解构表达式传参\"></a>解构表达式传参</h4><blockquote>\n<p>方法 可以接受 解构表达式</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function show ({name,age}){</span><br><span class=\"line\">    console.log(name,age)</span><br><span class=\"line\">}</span><br><span class=\"line\">let obj = {</span><br><span class=\"line\">    name:'yongge',</span><br><span class=\"line\">    age:'28'</span><br><span class=\"line\">}</span><br><span class=\"line\">show (obj)    //函数里面可以写成表达式 {name，age} = obj</span><br><span class=\"line\"></span><br><span class=\"line\">function add([x, y]){</span><br><span class=\"line\">return x + y;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">add([1, 2]); // 3</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>函数show,add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y。</p>\n</blockquote>\n"},{"title":"数组排序","date":"2023-01-11T07:02:26.000Z","_content":"### [](#sort \"sort()\")sort()\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">-8</span>,<span class=\"number\">-3</span>,<span class=\"number\">6</span>,<span class=\"number\">12</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">val1,val2</span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val1-val2;</span><br><span class=\"line\">};</span><br><span class=\"line\">array.sort(compare);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(array);<span class=\"comment\">// -8 -3 1 4...</span></span><br></pre></td></tr></tbody></table>\n\nsort()方法按照升序排列数组项，会调用每个数组项的toString()转型方法，然后比较得到的字符串。\n\ntoString()方法是把布尔值或BooleanObject转换为字符串，并返回结果。\n\ncompare()函数方法是一个比较函数，作为sort()方法的参数。\n\n### [](#冒泡排序 \"冒泡排序\")冒泡排序\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tvar array = [1,4,-8,-3,6,12,9,8];</span><br><span class=\"line\">\tfunction sort(arr){</span><br><span class=\"line\">\t\tfor(var j =0; j&lt;arr.length;j++){</span><br><span class=\"line\">\t\t\tfor(var i=0;i&lt;arr.length-1-j;i++){</span><br><span class=\"line\">\t\t\t\tif(arr[i]&gt;arr[i+1]){</span><br><span class=\"line\">\t                var temp = arr[i];</span><br><span class=\"line\">\t                arr[i] = arr[i+1];</span><br><span class=\"line\">\t                arr[i+1] = temp;</span><br><span class=\"line\">\t            }</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}\t</span><br><span class=\"line\">sort(array);</span><br><span class=\"line\">document.write(array);</span><br></pre></td></tr></tbody></table>\n\n（1）比较相邻的元素。如果第一个比第二个大，就交换他们两个位置。  \n（2）对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  \n（3）针对所有的元素重复以上的步骤，除了最后一个。  \n（4）持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n### [](#快速排序 \"快速排序\")快速排序\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class=\"line\">function quickSort(arr){</span><br><span class=\"line\">//如果数组长度小于等于1，则返回数组本身</span><br><span class=\"line\">    if(arr.length&lt;=1){</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    //定义中间值的索引</span><br><span class=\"line\">    var index = Math.floor(arr.length/2);</span><br><span class=\"line\">    //取到中间值</span><br><span class=\"line\">    var temp = arr.splice(index,1);</span><br><span class=\"line\">    //定义左右部分数组</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i=0;i&lt;arr.length;i++){</span><br><span class=\"line\">    //如果元素比中间值小，那么放在左边，否则放右边</span><br><span class=\"line\">        if(arr[i]&lt;temp){</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        }else{</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    return quickSort(left).concat(temp,quickSort(right));</span><br><span class=\"line\">}</span><br><span class=\"line\">document.write(quickSort(array));</span><br></pre></td></tr></tbody></table>\n\nMath.floor(x)方法是向下取整，返回小于或等于x的最接近的整数。\n\nsplice(index,num,item)方法是向数组中添加项目，或是从数组中删除项目，并返回被删除的项目。\n\nindex是整数，被操作项目所在的位置（必须）  \nnum是整数，要删除的项目的数量，如果为0，表示不删除（必须）  \nitem是向数组中添加的新项目，可以是多个（可选）  \npush()方法是向数组末尾添加一个或多个新项目并返回新数组的长度\n\nconcat()方法连接两个或多个数组，不会改变原有数组，返回一个新数组","source":"_posts/数组排序.md","raw":"---\ntitle: 数组排序\ndate: 2023-01-11 15:02:26\ntags:\n---\n### [](#sort \"sort()\")sort()\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">-8</span>,<span class=\"number\">-3</span>,<span class=\"number\">6</span>,<span class=\"number\">12</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">val1,val2</span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val1-val2;</span><br><span class=\"line\">};</span><br><span class=\"line\">array.sort(compare);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(array);<span class=\"comment\">// -8 -3 1 4...</span></span><br></pre></td></tr></tbody></table>\n\nsort()方法按照升序排列数组项，会调用每个数组项的toString()转型方法，然后比较得到的字符串。\n\ntoString()方法是把布尔值或BooleanObject转换为字符串，并返回结果。\n\ncompare()函数方法是一个比较函数，作为sort()方法的参数。\n\n### [](#冒泡排序 \"冒泡排序\")冒泡排序\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tvar array = [1,4,-8,-3,6,12,9,8];</span><br><span class=\"line\">\tfunction sort(arr){</span><br><span class=\"line\">\t\tfor(var j =0; j&lt;arr.length;j++){</span><br><span class=\"line\">\t\t\tfor(var i=0;i&lt;arr.length-1-j;i++){</span><br><span class=\"line\">\t\t\t\tif(arr[i]&gt;arr[i+1]){</span><br><span class=\"line\">\t                var temp = arr[i];</span><br><span class=\"line\">\t                arr[i] = arr[i+1];</span><br><span class=\"line\">\t                arr[i+1] = temp;</span><br><span class=\"line\">\t            }</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}\t</span><br><span class=\"line\">sort(array);</span><br><span class=\"line\">document.write(array);</span><br></pre></td></tr></tbody></table>\n\n（1）比较相邻的元素。如果第一个比第二个大，就交换他们两个位置。  \n（2）对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  \n（3）针对所有的元素重复以上的步骤，除了最后一个。  \n（4）持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n### [](#快速排序 \"快速排序\")快速排序\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class=\"line\">function quickSort(arr){</span><br><span class=\"line\">//如果数组长度小于等于1，则返回数组本身</span><br><span class=\"line\">    if(arr.length&lt;=1){</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    //定义中间值的索引</span><br><span class=\"line\">    var index = Math.floor(arr.length/2);</span><br><span class=\"line\">    //取到中间值</span><br><span class=\"line\">    var temp = arr.splice(index,1);</span><br><span class=\"line\">    //定义左右部分数组</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i=0;i&lt;arr.length;i++){</span><br><span class=\"line\">    //如果元素比中间值小，那么放在左边，否则放右边</span><br><span class=\"line\">        if(arr[i]&lt;temp){</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        }else{</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    return quickSort(left).concat(temp,quickSort(right));</span><br><span class=\"line\">}</span><br><span class=\"line\">document.write(quickSort(array));</span><br></pre></td></tr></tbody></table>\n\nMath.floor(x)方法是向下取整，返回小于或等于x的最接近的整数。\n\nsplice(index,num,item)方法是向数组中添加项目，或是从数组中删除项目，并返回被删除的项目。\n\nindex是整数，被操作项目所在的位置（必须）  \nnum是整数，要删除的项目的数量，如果为0，表示不删除（必须）  \nitem是向数组中添加的新项目，可以是多个（可选）  \npush()方法是向数组末尾添加一个或多个新项目并返回新数组的长度\n\nconcat()方法连接两个或多个数组，不会改变原有数组，返回一个新数组","slug":"数组排序","published":1,"updated":"2023-01-11T07:03:14.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcrcceaw0004dfq39u8b6jh3","content":"<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a><a href=\"#sort\" title=\"sort()\"></a>sort()</h3><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">-8</span>,<span class=\"number\">-3</span>,<span class=\"number\">6</span>,<span class=\"number\">12</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">val1,val2</span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val1-val2;</span><br><span class=\"line\">};</span><br><span class=\"line\">array.sort(compare);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(array);<span class=\"comment\">// -8 -3 1 4...</span></span><br></pre></td></tr></tbody></table>\n\n<p>sort()方法按照升序排列数组项，会调用每个数组项的toString()转型方法，然后比较得到的字符串。</p>\n<p>toString()方法是把布尔值或BooleanObject转换为字符串，并返回结果。</p>\n<p>compare()函数方法是一个比较函数，作为sort()方法的参数。</p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a><a href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\" title=\"冒泡排序\"></a>冒泡排序</h3><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tvar array = [1,4,-8,-3,6,12,9,8];</span><br><span class=\"line\">\tfunction sort(arr){</span><br><span class=\"line\">\t\tfor(var j =0; j&lt;arr.length;j++){</span><br><span class=\"line\">\t\t\tfor(var i=0;i&lt;arr.length-1-j;i++){</span><br><span class=\"line\">\t\t\t\tif(arr[i]&gt;arr[i+1]){</span><br><span class=\"line\">\t                var temp = arr[i];</span><br><span class=\"line\">\t                arr[i] = arr[i+1];</span><br><span class=\"line\">\t                arr[i+1] = temp;</span><br><span class=\"line\">\t            }</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}\t</span><br><span class=\"line\">sort(array);</span><br><span class=\"line\">document.write(array);</span><br></pre></td></tr></tbody></table>\n\n<p>（1）比较相邻的元素。如果第一个比第二个大，就交换他们两个位置。<br>（2）对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>（3）针对所有的元素重复以上的步骤，除了最后一个。<br>（4）持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a><a href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\" title=\"快速排序\"></a>快速排序</h3><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class=\"line\">function quickSort(arr){</span><br><span class=\"line\">//如果数组长度小于等于1，则返回数组本身</span><br><span class=\"line\">    if(arr.length&lt;=1){</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    //定义中间值的索引</span><br><span class=\"line\">    var index = Math.floor(arr.length/2);</span><br><span class=\"line\">    //取到中间值</span><br><span class=\"line\">    var temp = arr.splice(index,1);</span><br><span class=\"line\">    //定义左右部分数组</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i=0;i&lt;arr.length;i++){</span><br><span class=\"line\">    //如果元素比中间值小，那么放在左边，否则放右边</span><br><span class=\"line\">        if(arr[i]&lt;temp){</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        }else{</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    return quickSort(left).concat(temp,quickSort(right));</span><br><span class=\"line\">}</span><br><span class=\"line\">document.write(quickSort(array));</span><br></pre></td></tr></tbody></table>\n\n<p>Math.floor(x)方法是向下取整，返回小于或等于x的最接近的整数。</p>\n<p>splice(index,num,item)方法是向数组中添加项目，或是从数组中删除项目，并返回被删除的项目。</p>\n<p>index是整数，被操作项目所在的位置（必须）<br>num是整数，要删除的项目的数量，如果为0，表示不删除（必须）<br>item是向数组中添加的新项目，可以是多个（可选）<br>push()方法是向数组末尾添加一个或多个新项目并返回新数组的长度</p>\n<p>concat()方法连接两个或多个数组，不会改变原有数组，返回一个新数组</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a><a href=\"#sort\" title=\"sort()\"></a>sort()</h3><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">-8</span>,<span class=\"number\">-3</span>,<span class=\"number\">6</span>,<span class=\"number\">12</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">val1,val2</span>)</span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val1-val2;</span><br><span class=\"line\">};</span><br><span class=\"line\">array.sort(compare);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.write(array);<span class=\"comment\">// -8 -3 1 4...</span></span><br></pre></td></tr></tbody></table>\n\n<p>sort()方法按照升序排列数组项，会调用每个数组项的toString()转型方法，然后比较得到的字符串。</p>\n<p>toString()方法是把布尔值或BooleanObject转换为字符串，并返回结果。</p>\n<p>compare()函数方法是一个比较函数，作为sort()方法的参数。</p>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a><a href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\" title=\"冒泡排序\"></a>冒泡排序</h3><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tvar array = [1,4,-8,-3,6,12,9,8];</span><br><span class=\"line\">\tfunction sort(arr){</span><br><span class=\"line\">\t\tfor(var j =0; j&lt;arr.length;j++){</span><br><span class=\"line\">\t\t\tfor(var i=0;i&lt;arr.length-1-j;i++){</span><br><span class=\"line\">\t\t\t\tif(arr[i]&gt;arr[i+1]){</span><br><span class=\"line\">\t                var temp = arr[i];</span><br><span class=\"line\">\t                arr[i] = arr[i+1];</span><br><span class=\"line\">\t                arr[i+1] = temp;</span><br><span class=\"line\">\t            }</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}\t</span><br><span class=\"line\">sort(array);</span><br><span class=\"line\">document.write(array);</span><br></pre></td></tr></tbody></table>\n\n<p>（1）比较相邻的元素。如果第一个比第二个大，就交换他们两个位置。<br>（2）对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>（3）针对所有的元素重复以上的步骤，除了最后一个。<br>（4）持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a><a href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\" title=\"快速排序\"></a>快速排序</h3><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class=\"line\">function quickSort(arr){</span><br><span class=\"line\">//如果数组长度小于等于1，则返回数组本身</span><br><span class=\"line\">    if(arr.length&lt;=1){</span><br><span class=\"line\">        return arr;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    //定义中间值的索引</span><br><span class=\"line\">    var index = Math.floor(arr.length/2);</span><br><span class=\"line\">    //取到中间值</span><br><span class=\"line\">    var temp = arr.splice(index,1);</span><br><span class=\"line\">    //定义左右部分数组</span><br><span class=\"line\">    var left = [];</span><br><span class=\"line\">    var right = [];</span><br><span class=\"line\">    for(var i=0;i&lt;arr.length;i++){</span><br><span class=\"line\">    //如果元素比中间值小，那么放在左边，否则放右边</span><br><span class=\"line\">        if(arr[i]&lt;temp){</span><br><span class=\"line\">            left.push(arr[i]);</span><br><span class=\"line\">        }else{</span><br><span class=\"line\">            right.push(arr[i]);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    return quickSort(left).concat(temp,quickSort(right));</span><br><span class=\"line\">}</span><br><span class=\"line\">document.write(quickSort(array));</span><br></pre></td></tr></tbody></table>\n\n<p>Math.floor(x)方法是向下取整，返回小于或等于x的最接近的整数。</p>\n<p>splice(index,num,item)方法是向数组中添加项目，或是从数组中删除项目，并返回被删除的项目。</p>\n<p>index是整数，被操作项目所在的位置（必须）<br>num是整数，要删除的项目的数量，如果为0，表示不删除（必须）<br>item是向数组中添加的新项目，可以是多个（可选）<br>push()方法是向数组末尾添加一个或多个新项目并返回新数组的长度</p>\n<p>concat()方法连接两个或多个数组，不会改变原有数组，返回一个新数组</p>\n"},{"title":"闭包 变量","date":"2023-01-11T07:03:48.000Z","_content":"##闭包就是functions that return function  \n(是输出而是返回一个函数) f()()  \n变量的作用域无非就是两种：全局变量和局部变量。\n\n```auto\n函数内部可以直接读取全局变量。\n```\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n = 1;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">  \tconsole.log(n)</span><br><span class=\"line\">}</span><br><span class=\"line\">f1(); // 1</span><br></pre></td></tr></tbody></table>\n\n```auto\n在函数外部自然无法读取函数内的局部变量\n**函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量**\n```\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=1;</span><br><span class=\"line\">　　}</span><br><span class=\"line\">　\t　alert(n); // error</span><br></pre></td></tr></tbody></table>\n\n### [](#如何从外部读取局部变量？ \"如何从外部读取局部变量？\")如何从外部读取局部变量？\n\n```auto\n函数的内部，再定义一个函数。\n```\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=2;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>(){</span><br><span class=\"line\">　　　　　　alert(n); // 2</span><br><span class=\"line\">　　　　}</span><br><span class=\"line\">　　}</span><br><span class=\"line\">----</span><br><span class=\"line\">　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=1;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>(){</span><br><span class=\"line\">　　　　　　alert(n); </span><br><span class=\"line\">　　　　}</span><br><span class=\"line\">　　　　<span class=\"built_in\">return</span> f2;</span><br><span class=\"line\">　　}</span><br><span class=\"line\">　　var result=f1();</span><br><span class=\"line\">　　result(); // 1</span><br></pre></td></tr></tbody></table>\n\n函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。  \n这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。\n\n```auto\n@闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，\n另一个就是让这些变量的值始终保持在内存中\n```\n\n### [](#使用闭包的注意点 \"使用闭包的注意点\")使用闭包的注意点\n\n1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n\n2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。","source":"_posts/闭包-变量.md","raw":"---\ntitle: 闭包 变量\ndate: 2023-01-11 15:03:48\ntags:\n---\n##闭包就是functions that return function  \n(是输出而是返回一个函数) f()()  \n变量的作用域无非就是两种：全局变量和局部变量。\n\n```auto\n函数内部可以直接读取全局变量。\n```\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n = 1;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">  \tconsole.log(n)</span><br><span class=\"line\">}</span><br><span class=\"line\">f1(); // 1</span><br></pre></td></tr></tbody></table>\n\n```auto\n在函数外部自然无法读取函数内的局部变量\n**函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量**\n```\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=1;</span><br><span class=\"line\">　　}</span><br><span class=\"line\">　\t　alert(n); // error</span><br></pre></td></tr></tbody></table>\n\n### [](#如何从外部读取局部变量？ \"如何从外部读取局部变量？\")如何从外部读取局部变量？\n\n```auto\n函数的内部，再定义一个函数。\n```\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=2;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>(){</span><br><span class=\"line\">　　　　　　alert(n); // 2</span><br><span class=\"line\">　　　　}</span><br><span class=\"line\">　　}</span><br><span class=\"line\">----</span><br><span class=\"line\">　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=1;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>(){</span><br><span class=\"line\">　　　　　　alert(n); </span><br><span class=\"line\">　　　　}</span><br><span class=\"line\">　　　　<span class=\"built_in\">return</span> f2;</span><br><span class=\"line\">　　}</span><br><span class=\"line\">　　var result=f1();</span><br><span class=\"line\">　　result(); // 1</span><br></pre></td></tr></tbody></table>\n\n函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。  \n这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。\n\n```auto\n@闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，\n另一个就是让这些变量的值始终保持在内存中\n```\n\n### [](#使用闭包的注意点 \"使用闭包的注意点\")使用闭包的注意点\n\n1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n\n2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。","slug":"闭包-变量","published":1,"updated":"2023-01-11T07:04:09.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcrcceax0005dfq384rg7d4z","content":"<p>##闭包就是functions that return function<br>(是输出而是返回一个函数) f()()<br>变量的作用域无非就是两种：全局变量和局部变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数内部可以直接读取全局变量。</span><br></pre></td></tr></table></figure>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n = 1;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">  \tconsole.log(n)</span><br><span class=\"line\">}</span><br><span class=\"line\">f1(); // 1</span><br></pre></td></tr></tbody></table>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在函数外部自然无法读取函数内的局部变量</span><br><span class=\"line\">**函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量**</span><br></pre></td></tr></table></figure>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=1;</span><br><span class=\"line\">　　}</span><br><span class=\"line\">　\t　alert(n); // error</span><br></pre></td></tr></tbody></table>\n\n<h3 id=\"如何从外部读取局部变量？\"><a href=\"#如何从外部读取局部变量？\" class=\"headerlink\" title=\"如何从外部读取局部变量？\"></a><a href=\"#%E5%A6%82%E4%BD%95%E4%BB%8E%E5%A4%96%E9%83%A8%E8%AF%BB%E5%8F%96%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%EF%BC%9F\" title=\"如何从外部读取局部变量？\"></a>如何从外部读取局部变量？</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数的内部，再定义一个函数。</span><br></pre></td></tr></table></figure>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=2;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>(){</span><br><span class=\"line\">　　　　　　alert(n); // 2</span><br><span class=\"line\">　　　　}</span><br><span class=\"line\">　　}</span><br><span class=\"line\">----</span><br><span class=\"line\">　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=1;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>(){</span><br><span class=\"line\">　　　　　　alert(n); </span><br><span class=\"line\">　　　　}</span><br><span class=\"line\">　　　　<span class=\"built_in\">return</span> f2;</span><br><span class=\"line\">　　}</span><br><span class=\"line\">　　var result=f1();</span><br><span class=\"line\">　　result(); // 1</span><br></pre></td></tr></tbody></table>\n\n<p>函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。<br>这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，</span><br><span class=\"line\">另一个就是让这些变量的值始终保持在内存中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a><a href=\"#%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>\n<p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>##闭包就是functions that return function<br>(是输出而是返回一个函数) f()()<br>变量的作用域无非就是两种：全局变量和局部变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数内部可以直接读取全局变量。</span><br></pre></td></tr></table></figure>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n = 1;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">  \tconsole.log(n)</span><br><span class=\"line\">}</span><br><span class=\"line\">f1(); // 1</span><br></pre></td></tr></tbody></table>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在函数外部自然无法读取函数内的局部变量</span><br><span class=\"line\">**函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量**</span><br></pre></td></tr></table></figure>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=1;</span><br><span class=\"line\">　　}</span><br><span class=\"line\">　\t　alert(n); // error</span><br></pre></td></tr></tbody></table>\n\n<h3 id=\"如何从外部读取局部变量？\"><a href=\"#如何从外部读取局部变量？\" class=\"headerlink\" title=\"如何从外部读取局部变量？\"></a><a href=\"#%E5%A6%82%E4%BD%95%E4%BB%8E%E5%A4%96%E9%83%A8%E8%AF%BB%E5%8F%96%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%EF%BC%9F\" title=\"如何从外部读取局部变量？\"></a>如何从外部读取局部变量？</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数的内部，再定义一个函数。</span><br></pre></td></tr></table></figure>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=2;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>(){</span><br><span class=\"line\">　　　　　　alert(n); // 2</span><br><span class=\"line\">　　　　}</span><br><span class=\"line\">　　}</span><br><span class=\"line\">----</span><br><span class=\"line\">　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>(){</span><br><span class=\"line\">　　　　var n=1;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>(){</span><br><span class=\"line\">　　　　　　alert(n); </span><br><span class=\"line\">　　　　}</span><br><span class=\"line\">　　　　<span class=\"built_in\">return</span> f2;</span><br><span class=\"line\">　　}</span><br><span class=\"line\">　　var result=f1();</span><br><span class=\"line\">　　result(); // 1</span><br></pre></td></tr></tbody></table>\n\n<p>函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。<br>这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，</span><br><span class=\"line\">另一个就是让这些变量的值始终保持在内存中</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a><a href=\"#%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>\n<p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>\n"},{"title":"Symbol","date":"2023-01-11T07:12:51.000Z","_content":"### [](#Symbol \"Symbol\")Symbol\n\n> 概念  \n> ES5的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是ES6引入Symbol的原因。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg:var a = { name: 'lucy'};</span><br><span class=\"line\"></span><br><span class=\"line\">a.name = 'lili';</span><br><span class=\"line\">这样就会重写属性</span><br></pre></td></tr></tbody></table>\n\n> Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）  \n> ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。\n\n**Symbol值通过Symbol函数生成,不能用new命令，基本上，它是一种类似于字符串的数据类型。**\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\">typeof s</span><br><span class=\"line\">// \"Symbol\"</span><br></pre></td></tr></tbody></table>\n\n> Symbol可以接收字符串 为参数 Symbol值可以显示转为字符串 下面提到\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol('foo');</span><br><span class=\"line\">s1 // Symbol(foo)</span><br><span class=\"line\">s1.toString() // \"Symbol(foo)\"</span><br></pre></td></tr></tbody></table>\n\n> Symbol 接收参数是一个对象的话 就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = {</span><br><span class=\"line\">toString() {</span><br><span class=\"line\">    return 'abc';</span><br><span class=\"line\">}</span><br><span class=\"line\">};</span><br><span class=\"line\">const sym = Symbol(obj);</span><br><span class=\"line\">sym // Symbol(abc)</span><br></pre></td></tr></tbody></table>\n\n**Symbol函数是为了独一无二，相同参数的Symbol函数的返回值是不相等的**\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 没有参数的情况</span><br><span class=\"line\">var s1 = Symbol();</span><br><span class=\"line\">var s2 = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // false</span><br><span class=\"line\"></span><br><span class=\"line\">// 有参数的情况</span><br><span class=\"line\">var s1 = Symbol('foo');</span><br><span class=\"line\">var s2 = Symbol('foo');</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // false</span><br></pre></td></tr></tbody></table>\n\n*++++++s1和s2是两个Symbol值。如果不加参数，它们在控制台的输出都是Symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。*\n\n**Symbol值不能与其他类型的值进行运算，会报错。**\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sym = Symbol('My Symbol');</span><br><span class=\"line\"></span><br><span class=\"line\">\"your Symbol is \" + sym</span><br><span class=\"line\">// TypeError: can't convert Symbol to string</span><br><span class=\"line\">`your Symbol is ${sym}`</span><br><span class=\"line\">// TypeError: can't convert Symbol to string</span><br></pre></td></tr></tbody></table>\n\n**Symbol值可以显式转为字符串,也可以转为布尔值**\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sym = Symbol('My Symbol');</span><br><span class=\"line\"></span><br><span class=\"line\">String(sym) // 'Symbol(My Symbol)'</span><br><span class=\"line\">sym.toString() // 'Symbol(My Symbol)'</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var sym = Symbol();</span><br><span class=\"line\">Boolean(sym) // true</span><br><span class=\"line\">!sym  // false</span><br><span class=\"line\"></span><br><span class=\"line\">if (sym) {</span><br><span class=\"line\">// ...</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Number(sym) // TypeError: Cannot convert a Symbol value to a number</span><br><span class=\"line\">sym + 2 // TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></tbody></table>\n\n* * *\n\n#### [](#作为属性名的Symbol \"作为属性名的Symbol\")作为属性名的Symbol\n\n> 由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。\n\n> 下面代码通过方括号结构和Object.defineProperty，将对象的属性名指定为一个Symbol值。\n\nmySymbol\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 第一种写法</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">a[mySymbol] = 'Hello!';</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种写法</span><br><span class=\"line\">var a = {</span><br><span class=\"line\">[mySymbol]: 'Hello!'</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">// 第三种写法</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">Object.defineProperty(a, mySymbol, { value: 'Hello!' });</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上写法都得到同样结果</span><br><span class=\"line\">a[mySymbol]  // \"Hello!\"</span><br></pre></td></tr></tbody></table>\n\n还有一种是点运算符 赋值 先看下\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var mySymbol = Symbol();</span><br><span class=\"line\"> var a = {};</span><br><span class=\"line\"> a.mySymbol = 'Hello!';</span><br><span class=\"line\"> console.log(a.mySymbol)</span><br><span class=\"line\"> console.log(a[mySymbol])</span><br><span class=\"line\"> console.log(a['mySymbol'])</span><br><span class=\"line\">// VM642:5 Hello!</span><br><span class=\"line\">// undefined</span><br><span class=\"line\">// VM642:6 Hello!</span><br></pre></td></tr></tbody></table>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mySymbol = Symbol();</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">a.mySymbol = 'Hello me!';</span><br><span class=\"line\">a[mySymbol] = 'Hello you!';</span><br><span class=\"line\">console.log(a.mySymbol)   //</span><br><span class=\"line\">console.log(a[mySymbol])  //  你猜</span><br><span class=\"line\">console.log(a['mySymbol'])  //</span><br></pre></td></tr></tbody></table>\n\n**因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个Symbol值。**\n\n> **\\***在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中。 \\[Symbol(‘你想要的’)\\]：‘你想要的’ 取值一直没找到问题所在\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = Symbol();</span><br><span class=\"line\">let obj = {</span><br><span class=\"line\">  [s](arg) { ... }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let myobj = {</span><br><span class=\"line\">    [Symbol('name')]:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出yonge</span><br></pre></td></tr></tbody></table>\n\n#### [](#属性名的遍历 \"属性名的遍历\")属性名的遍历\n\n> Symbol 作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。\n\n> Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = {};</span><br><span class=\"line\">var a = Symbol('a');</span><br><span class=\"line\">var b = Symbol('b');</span><br><span class=\"line\"></span><br><span class=\"line\">obj[a] = 'Hello';</span><br><span class=\"line\">obj[b] = 'World';</span><br><span class=\"line\"></span><br><span class=\"line\">obj // {Symbol(a): \"Hello\", Symbol(b): \"World\"}</span><br><span class=\"line\"></span><br><span class=\"line\">var objectSymbols = Object.getOwnPropertySymbols(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">objectSymbols</span><br><span class=\"line\">// [Symbol(a), Symbol(b)]</span><br></pre></td></tr></tbody></table>\n\n> 另一个例子，Object.getOwnPropertySymbols方法与for…in循环、Object.getOwnPropertyNames方法进行对比的例子。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = {};</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = Symbol(\"foo\");</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(obj, foo, { value: \"foobar\"});</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i in obj) {</span><br><span class=\"line\">  console.log(i); // 无输出</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Object.getOwnPropertyNames(obj)</span><br><span class=\"line\">// []</span><br><span class=\"line\"></span><br><span class=\"line\">Object.getOwnPropertySymbols(obj)</span><br><span class=\"line\">// [Symbol(foo)]</span><br></pre></td></tr></tbody></table>\n\n> 使用Object.getOwnPropertyNames方法得不到Symbol属性名，需要使用Object.getOwnPropertySymbols方法。另一个新的API，Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = {</span><br><span class=\"line\">  [Symbol('my_key')]: 1,</span><br><span class=\"line\">  enum: 2,</span><br><span class=\"line\">  nonEnum: 3</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">Reflect.ownKeys(obj)</span><br><span class=\"line\">// [Symbol(my_key), 'enum', 'nonEnum']</span><br></pre></td></tr></tbody></table>\n\n#### [](#Symbol-for-，Symbol-keyFor \"Symbol.for()，Symbol.keyFor()\")Symbol.for()，Symbol.keyFor()\n\n> Symbol.for() 首先在全局中搜索有没有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。和直接的Symbol就点不同了。  \n> Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(“cat”)30次，每次都会返回同一个 Symbol 值，但是调用Symbol(“cat”)30次，会返回30个不同的Symbol值。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol.for('foo');</span><br><span class=\"line\">var s2 = Symbol.for('foo');</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Symbol.for(\"bar\") === Symbol.for(\"bar\")</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol(\"bar\") === Symbol(\"bar\")</span><br><span class=\"line\">// false</span><br></pre></td></tr></tbody></table>\n\n> Symbol.keyFor方法返回一个已登记的Symbol类型值的key。实质就是检测该Symbol是否已创建\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol.for(\"foo\");</span><br><span class=\"line\">Symbol.keyFor(s1) // \"foo\"</span><br><span class=\"line\"></span><br><span class=\"line\">var s2 = Symbol(\"foo\");</span><br><span class=\"line\">Symbol.keyFor(s2) // undefined</span><br></pre></td></tr></tbody></table>\n\n#### [](#内置Symbol \"内置Symbol\")内置Symbol\n\n除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法\n\n　　1、Symbol.haslnstance\n\n　　一个在执行instanceof时调用的内部方法，用于检测对象的继承信息\n\n　　2、Symbol.isConcatSpreadable\n\n　　一个布尔值，用于表示当传递一个集合作为Array.prototype.concat()方法的参数时，是否应该将集合内的元素规整到同一层级\n\n　　3、Symbol.iterator\n\n　　一个返回迭代器的方法\n\n　　4、Symbol.match\n\n　　一个在调用String.prototype.match()方法时调用的方法，用于比较字符串\n\n　　5、Symbol.replace\n\n　　一个在调用String.prototype.replace()方法时调用的方法，用于替换字符串的子串\n\n　　6、Symbol.search\n\n　　一个在调用String.prototype.search()方法时调用的方法，用于在字符串中定位子串\n\n　　7、Symbol.species\n\n　　用于创建派生类的构造函数\n\n　　8、Symbol.split\n\n　　一个在调用String.prototype.split()方法时调用的方法，用于分割字符串\n\n　　9、Symbol.toprimitive\n\n　　一个返回对象原始值的方法\n\n　　10、Symbol.ToStringTag\n\n　　一个在调用Object.prototype.toString()方法时使用的字符串，用于创建对象描述\n\n　　11、Symbol.unscopables\n\n　　一个定义了一些不可被with语句引用的对象属性名称的对象集合","source":"_posts/Symbol.md","raw":"---\ntitle: Symbol\ndate: 2023-01-11 15:12:51\ntags:\n---\n### [](#Symbol \"Symbol\")Symbol\n\n> 概念  \n> ES5的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是ES6引入Symbol的原因。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg:var a = { name: 'lucy'};</span><br><span class=\"line\"></span><br><span class=\"line\">a.name = 'lili';</span><br><span class=\"line\">这样就会重写属性</span><br></pre></td></tr></tbody></table>\n\n> Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）  \n> ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。\n\n**Symbol值通过Symbol函数生成,不能用new命令，基本上，它是一种类似于字符串的数据类型。**\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\">typeof s</span><br><span class=\"line\">// \"Symbol\"</span><br></pre></td></tr></tbody></table>\n\n> Symbol可以接收字符串 为参数 Symbol值可以显示转为字符串 下面提到\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol('foo');</span><br><span class=\"line\">s1 // Symbol(foo)</span><br><span class=\"line\">s1.toString() // \"Symbol(foo)\"</span><br></pre></td></tr></tbody></table>\n\n> Symbol 接收参数是一个对象的话 就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = {</span><br><span class=\"line\">toString() {</span><br><span class=\"line\">    return 'abc';</span><br><span class=\"line\">}</span><br><span class=\"line\">};</span><br><span class=\"line\">const sym = Symbol(obj);</span><br><span class=\"line\">sym // Symbol(abc)</span><br></pre></td></tr></tbody></table>\n\n**Symbol函数是为了独一无二，相同参数的Symbol函数的返回值是不相等的**\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 没有参数的情况</span><br><span class=\"line\">var s1 = Symbol();</span><br><span class=\"line\">var s2 = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // false</span><br><span class=\"line\"></span><br><span class=\"line\">// 有参数的情况</span><br><span class=\"line\">var s1 = Symbol('foo');</span><br><span class=\"line\">var s2 = Symbol('foo');</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // false</span><br></pre></td></tr></tbody></table>\n\n*++++++s1和s2是两个Symbol值。如果不加参数，它们在控制台的输出都是Symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。*\n\n**Symbol值不能与其他类型的值进行运算，会报错。**\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sym = Symbol('My Symbol');</span><br><span class=\"line\"></span><br><span class=\"line\">\"your Symbol is \" + sym</span><br><span class=\"line\">// TypeError: can't convert Symbol to string</span><br><span class=\"line\">`your Symbol is ${sym}`</span><br><span class=\"line\">// TypeError: can't convert Symbol to string</span><br></pre></td></tr></tbody></table>\n\n**Symbol值可以显式转为字符串,也可以转为布尔值**\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sym = Symbol('My Symbol');</span><br><span class=\"line\"></span><br><span class=\"line\">String(sym) // 'Symbol(My Symbol)'</span><br><span class=\"line\">sym.toString() // 'Symbol(My Symbol)'</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var sym = Symbol();</span><br><span class=\"line\">Boolean(sym) // true</span><br><span class=\"line\">!sym  // false</span><br><span class=\"line\"></span><br><span class=\"line\">if (sym) {</span><br><span class=\"line\">// ...</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Number(sym) // TypeError: Cannot convert a Symbol value to a number</span><br><span class=\"line\">sym + 2 // TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></tbody></table>\n\n* * *\n\n#### [](#作为属性名的Symbol \"作为属性名的Symbol\")作为属性名的Symbol\n\n> 由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。\n\n> 下面代码通过方括号结构和Object.defineProperty，将对象的属性名指定为一个Symbol值。\n\nmySymbol\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 第一种写法</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">a[mySymbol] = 'Hello!';</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种写法</span><br><span class=\"line\">var a = {</span><br><span class=\"line\">[mySymbol]: 'Hello!'</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">// 第三种写法</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">Object.defineProperty(a, mySymbol, { value: 'Hello!' });</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上写法都得到同样结果</span><br><span class=\"line\">a[mySymbol]  // \"Hello!\"</span><br></pre></td></tr></tbody></table>\n\n还有一种是点运算符 赋值 先看下\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var mySymbol = Symbol();</span><br><span class=\"line\"> var a = {};</span><br><span class=\"line\"> a.mySymbol = 'Hello!';</span><br><span class=\"line\"> console.log(a.mySymbol)</span><br><span class=\"line\"> console.log(a[mySymbol])</span><br><span class=\"line\"> console.log(a['mySymbol'])</span><br><span class=\"line\">// VM642:5 Hello!</span><br><span class=\"line\">// undefined</span><br><span class=\"line\">// VM642:6 Hello!</span><br></pre></td></tr></tbody></table>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mySymbol = Symbol();</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">a.mySymbol = 'Hello me!';</span><br><span class=\"line\">a[mySymbol] = 'Hello you!';</span><br><span class=\"line\">console.log(a.mySymbol)   //</span><br><span class=\"line\">console.log(a[mySymbol])  //  你猜</span><br><span class=\"line\">console.log(a['mySymbol'])  //</span><br></pre></td></tr></tbody></table>\n\n**因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个Symbol值。**\n\n> **\\***在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中。 \\[Symbol(‘你想要的’)\\]：‘你想要的’ 取值一直没找到问题所在\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = Symbol();</span><br><span class=\"line\">let obj = {</span><br><span class=\"line\">  [s](arg) { ... }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let myobj = {</span><br><span class=\"line\">    [Symbol('name')]:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出yonge</span><br></pre></td></tr></tbody></table>\n\n#### [](#属性名的遍历 \"属性名的遍历\")属性名的遍历\n\n> Symbol 作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。\n\n> Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = {};</span><br><span class=\"line\">var a = Symbol('a');</span><br><span class=\"line\">var b = Symbol('b');</span><br><span class=\"line\"></span><br><span class=\"line\">obj[a] = 'Hello';</span><br><span class=\"line\">obj[b] = 'World';</span><br><span class=\"line\"></span><br><span class=\"line\">obj // {Symbol(a): \"Hello\", Symbol(b): \"World\"}</span><br><span class=\"line\"></span><br><span class=\"line\">var objectSymbols = Object.getOwnPropertySymbols(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">objectSymbols</span><br><span class=\"line\">// [Symbol(a), Symbol(b)]</span><br></pre></td></tr></tbody></table>\n\n> 另一个例子，Object.getOwnPropertySymbols方法与for…in循环、Object.getOwnPropertyNames方法进行对比的例子。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = {};</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = Symbol(\"foo\");</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(obj, foo, { value: \"foobar\"});</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i in obj) {</span><br><span class=\"line\">  console.log(i); // 无输出</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Object.getOwnPropertyNames(obj)</span><br><span class=\"line\">// []</span><br><span class=\"line\"></span><br><span class=\"line\">Object.getOwnPropertySymbols(obj)</span><br><span class=\"line\">// [Symbol(foo)]</span><br></pre></td></tr></tbody></table>\n\n> 使用Object.getOwnPropertyNames方法得不到Symbol属性名，需要使用Object.getOwnPropertySymbols方法。另一个新的API，Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = {</span><br><span class=\"line\">  [Symbol('my_key')]: 1,</span><br><span class=\"line\">  enum: 2,</span><br><span class=\"line\">  nonEnum: 3</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">Reflect.ownKeys(obj)</span><br><span class=\"line\">// [Symbol(my_key), 'enum', 'nonEnum']</span><br></pre></td></tr></tbody></table>\n\n#### [](#Symbol-for-，Symbol-keyFor \"Symbol.for()，Symbol.keyFor()\")Symbol.for()，Symbol.keyFor()\n\n> Symbol.for() 首先在全局中搜索有没有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。和直接的Symbol就点不同了。  \n> Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(“cat”)30次，每次都会返回同一个 Symbol 值，但是调用Symbol(“cat”)30次，会返回30个不同的Symbol值。\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol.for('foo');</span><br><span class=\"line\">var s2 = Symbol.for('foo');</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Symbol.for(\"bar\") === Symbol.for(\"bar\")</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol(\"bar\") === Symbol(\"bar\")</span><br><span class=\"line\">// false</span><br></pre></td></tr></tbody></table>\n\n> Symbol.keyFor方法返回一个已登记的Symbol类型值的key。实质就是检测该Symbol是否已创建\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol.for(\"foo\");</span><br><span class=\"line\">Symbol.keyFor(s1) // \"foo\"</span><br><span class=\"line\"></span><br><span class=\"line\">var s2 = Symbol(\"foo\");</span><br><span class=\"line\">Symbol.keyFor(s2) // undefined</span><br></pre></td></tr></tbody></table>\n\n#### [](#内置Symbol \"内置Symbol\")内置Symbol\n\n除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法\n\n　　1、Symbol.haslnstance\n\n　　一个在执行instanceof时调用的内部方法，用于检测对象的继承信息\n\n　　2、Symbol.isConcatSpreadable\n\n　　一个布尔值，用于表示当传递一个集合作为Array.prototype.concat()方法的参数时，是否应该将集合内的元素规整到同一层级\n\n　　3、Symbol.iterator\n\n　　一个返回迭代器的方法\n\n　　4、Symbol.match\n\n　　一个在调用String.prototype.match()方法时调用的方法，用于比较字符串\n\n　　5、Symbol.replace\n\n　　一个在调用String.prototype.replace()方法时调用的方法，用于替换字符串的子串\n\n　　6、Symbol.search\n\n　　一个在调用String.prototype.search()方法时调用的方法，用于在字符串中定位子串\n\n　　7、Symbol.species\n\n　　用于创建派生类的构造函数\n\n　　8、Symbol.split\n\n　　一个在调用String.prototype.split()方法时调用的方法，用于分割字符串\n\n　　9、Symbol.toprimitive\n\n　　一个返回对象原始值的方法\n\n　　10、Symbol.ToStringTag\n\n　　一个在调用Object.prototype.toString()方法时使用的字符串，用于创建对象描述\n\n　　11、Symbol.unscopables\n\n　　一个定义了一些不可被with语句引用的对象属性名称的对象集合","slug":"Symbol","published":1,"updated":"2023-01-11T07:13:23.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clcrcceay0006dfq32gkg0lm7","content":"<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a><a href=\"#Symbol\" title=\"Symbol\"></a>Symbol</h3><blockquote>\n<p>概念<br>ES5的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是ES6引入Symbol的原因。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg:var a = { name: 'lucy'};</span><br><span class=\"line\"></span><br><span class=\"line\">a.name = 'lili';</span><br><span class=\"line\">这样就会重写属性</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）<br>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。</p>\n</blockquote>\n<p><strong>Symbol值通过Symbol函数生成,不能用new命令，基本上，它是一种类似于字符串的数据类型。</strong></p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\">typeof s</span><br><span class=\"line\">// \"Symbol\"</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>Symbol可以接收字符串 为参数 Symbol值可以显示转为字符串 下面提到</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol('foo');</span><br><span class=\"line\">s1 // Symbol(foo)</span><br><span class=\"line\">s1.toString() // \"Symbol(foo)\"</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>Symbol 接收参数是一个对象的话 就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = {</span><br><span class=\"line\">toString() {</span><br><span class=\"line\">    return 'abc';</span><br><span class=\"line\">}</span><br><span class=\"line\">};</span><br><span class=\"line\">const sym = Symbol(obj);</span><br><span class=\"line\">sym // Symbol(abc)</span><br></pre></td></tr></tbody></table>\n\n<p><strong>Symbol函数是为了独一无二，相同参数的Symbol函数的返回值是不相等的</strong></p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 没有参数的情况</span><br><span class=\"line\">var s1 = Symbol();</span><br><span class=\"line\">var s2 = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // false</span><br><span class=\"line\"></span><br><span class=\"line\">// 有参数的情况</span><br><span class=\"line\">var s1 = Symbol('foo');</span><br><span class=\"line\">var s2 = Symbol('foo');</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // false</span><br></pre></td></tr></tbody></table>\n\n<p><em>++++++s1和s2是两个Symbol值。如果不加参数，它们在控制台的输出都是Symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。</em></p>\n<p><strong>Symbol值不能与其他类型的值进行运算，会报错。</strong></p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sym = Symbol('My Symbol');</span><br><span class=\"line\"></span><br><span class=\"line\">\"your Symbol is \" + sym</span><br><span class=\"line\">// TypeError: can't convert Symbol to string</span><br><span class=\"line\">`your Symbol is ${sym}`</span><br><span class=\"line\">// TypeError: can't convert Symbol to string</span><br></pre></td></tr></tbody></table>\n\n<p><strong>Symbol值可以显式转为字符串,也可以转为布尔值</strong></p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sym = Symbol('My Symbol');</span><br><span class=\"line\"></span><br><span class=\"line\">String(sym) // 'Symbol(My Symbol)'</span><br><span class=\"line\">sym.toString() // 'Symbol(My Symbol)'</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var sym = Symbol();</span><br><span class=\"line\">Boolean(sym) // true</span><br><span class=\"line\">!sym  // false</span><br><span class=\"line\"></span><br><span class=\"line\">if (sym) {</span><br><span class=\"line\">// ...</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Number(sym) // TypeError: Cannot convert a Symbol value to a number</span><br><span class=\"line\">sym + 2 // TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></tbody></table>\n\n<hr>\n<h4 id=\"作为属性名的Symbol\"><a href=\"#作为属性名的Symbol\" class=\"headerlink\" title=\"作为属性名的Symbol\"></a><a href=\"#%E4%BD%9C%E4%B8%BA%E5%B1%9E%E6%80%A7%E5%90%8D%E7%9A%84Symbol\" title=\"作为属性名的Symbol\"></a>作为属性名的Symbol</h4><blockquote>\n<p>由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p>\n</blockquote>\n<blockquote>\n<p>下面代码通过方括号结构和Object.defineProperty，将对象的属性名指定为一个Symbol值。</p>\n</blockquote>\n<p>mySymbol</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 第一种写法</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">a[mySymbol] = 'Hello!';</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种写法</span><br><span class=\"line\">var a = {</span><br><span class=\"line\">[mySymbol]: 'Hello!'</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">// 第三种写法</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">Object.defineProperty(a, mySymbol, { value: 'Hello!' });</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上写法都得到同样结果</span><br><span class=\"line\">a[mySymbol]  // \"Hello!\"</span><br></pre></td></tr></tbody></table>\n\n<p>还有一种是点运算符 赋值 先看下</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var mySymbol = Symbol();</span><br><span class=\"line\"> var a = {};</span><br><span class=\"line\"> a.mySymbol = 'Hello!';</span><br><span class=\"line\"> console.log(a.mySymbol)</span><br><span class=\"line\"> console.log(a[mySymbol])</span><br><span class=\"line\"> console.log(a['mySymbol'])</span><br><span class=\"line\">// VM642:5 Hello!</span><br><span class=\"line\">// undefined</span><br><span class=\"line\">// VM642:6 Hello!</span><br></pre></td></tr></tbody></table>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mySymbol = Symbol();</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">a.mySymbol = 'Hello me!';</span><br><span class=\"line\">a[mySymbol] = 'Hello you!';</span><br><span class=\"line\">console.log(a.mySymbol)   //</span><br><span class=\"line\">console.log(a[mySymbol])  //  你猜</span><br><span class=\"line\">console.log(a['mySymbol'])  //</span><br></pre></td></tr></tbody></table>\n\n<p><strong>因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个Symbol值。</strong></p>\n<blockquote>\n<p>*****在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中。 [Symbol(‘你想要的’)]：‘你想要的’ 取值一直没找到问题所在</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = Symbol();</span><br><span class=\"line\">let obj = {</span><br><span class=\"line\">  [s](arg) { ... }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let myobj = {</span><br><span class=\"line\">    [Symbol('name')]:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出yonge</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"属性名的遍历\"><a href=\"#属性名的遍历\" class=\"headerlink\" title=\"属性名的遍历\"></a><a href=\"#%E5%B1%9E%E6%80%A7%E5%90%8D%E7%9A%84%E9%81%8D%E5%8E%86\" title=\"属性名的遍历\"></a>属性名的遍历</h4><blockquote>\n<p>Symbol 作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。</p>\n</blockquote>\n<blockquote>\n<p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = {};</span><br><span class=\"line\">var a = Symbol('a');</span><br><span class=\"line\">var b = Symbol('b');</span><br><span class=\"line\"></span><br><span class=\"line\">obj[a] = 'Hello';</span><br><span class=\"line\">obj[b] = 'World';</span><br><span class=\"line\"></span><br><span class=\"line\">obj // {Symbol(a): \"Hello\", Symbol(b): \"World\"}</span><br><span class=\"line\"></span><br><span class=\"line\">var objectSymbols = Object.getOwnPropertySymbols(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">objectSymbols</span><br><span class=\"line\">// [Symbol(a), Symbol(b)]</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>另一个例子，Object.getOwnPropertySymbols方法与for…in循环、Object.getOwnPropertyNames方法进行对比的例子。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = {};</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = Symbol(\"foo\");</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(obj, foo, { value: \"foobar\"});</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i in obj) {</span><br><span class=\"line\">  console.log(i); // 无输出</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Object.getOwnPropertyNames(obj)</span><br><span class=\"line\">// []</span><br><span class=\"line\"></span><br><span class=\"line\">Object.getOwnPropertySymbols(obj)</span><br><span class=\"line\">// [Symbol(foo)]</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>使用Object.getOwnPropertyNames方法得不到Symbol属性名，需要使用Object.getOwnPropertySymbols方法。另一个新的API，Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = {</span><br><span class=\"line\">  [Symbol('my_key')]: 1,</span><br><span class=\"line\">  enum: 2,</span><br><span class=\"line\">  nonEnum: 3</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">Reflect.ownKeys(obj)</span><br><span class=\"line\">// [Symbol(my_key), 'enum', 'nonEnum']</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"Symbol-for-，Symbol-keyFor\"><a href=\"#Symbol-for-，Symbol-keyFor\" class=\"headerlink\" title=\"Symbol.for()，Symbol.keyFor()\"></a><a href=\"#Symbol-for-%EF%BC%8CSymbol-keyFor\" title=\"Symbol.for()，Symbol.keyFor()\"></a>Symbol.for()，Symbol.keyFor()</h4><blockquote>\n<p>Symbol.for() 首先在全局中搜索有没有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。和直接的Symbol就点不同了。<br>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(“cat”)30次，每次都会返回同一个 Symbol 值，但是调用Symbol(“cat”)30次，会返回30个不同的Symbol值。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol.for('foo');</span><br><span class=\"line\">var s2 = Symbol.for('foo');</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Symbol.for(\"bar\") === Symbol.for(\"bar\")</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol(\"bar\") === Symbol(\"bar\")</span><br><span class=\"line\">// false</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>Symbol.keyFor方法返回一个已登记的Symbol类型值的key。实质就是检测该Symbol是否已创建</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol.for(\"foo\");</span><br><span class=\"line\">Symbol.keyFor(s1) // \"foo\"</span><br><span class=\"line\"></span><br><span class=\"line\">var s2 = Symbol(\"foo\");</span><br><span class=\"line\">Symbol.keyFor(s2) // undefined</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"内置Symbol\"><a href=\"#内置Symbol\" class=\"headerlink\" title=\"内置Symbol\"></a><a href=\"#%E5%86%85%E7%BD%AESymbol\" title=\"内置Symbol\"></a>内置Symbol</h4><p>除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法</p>\n<p>　　1、Symbol.haslnstance</p>\n<p>　　一个在执行instanceof时调用的内部方法，用于检测对象的继承信息</p>\n<p>　　2、Symbol.isConcatSpreadable</p>\n<p>　　一个布尔值，用于表示当传递一个集合作为Array.prototype.concat()方法的参数时，是否应该将集合内的元素规整到同一层级</p>\n<p>　　3、Symbol.iterator</p>\n<p>　　一个返回迭代器的方法</p>\n<p>　　4、Symbol.match</p>\n<p>　　一个在调用String.prototype.match()方法时调用的方法，用于比较字符串</p>\n<p>　　5、Symbol.replace</p>\n<p>　　一个在调用String.prototype.replace()方法时调用的方法，用于替换字符串的子串</p>\n<p>　　6、Symbol.search</p>\n<p>　　一个在调用String.prototype.search()方法时调用的方法，用于在字符串中定位子串</p>\n<p>　　7、Symbol.species</p>\n<p>　　用于创建派生类的构造函数</p>\n<p>　　8、Symbol.split</p>\n<p>　　一个在调用String.prototype.split()方法时调用的方法，用于分割字符串</p>\n<p>　　9、Symbol.toprimitive</p>\n<p>　　一个返回对象原始值的方法</p>\n<p>　　10、Symbol.ToStringTag</p>\n<p>　　一个在调用Object.prototype.toString()方法时使用的字符串，用于创建对象描述</p>\n<p>　　11、Symbol.unscopables</p>\n<p>　　一个定义了一些不可被with语句引用的对象属性名称的对象集合</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a><a href=\"#Symbol\" title=\"Symbol\"></a>Symbol</h3><blockquote>\n<p>概念<br>ES5的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是ES6引入Symbol的原因。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg:var a = { name: 'lucy'};</span><br><span class=\"line\"></span><br><span class=\"line\">a.name = 'lili';</span><br><span class=\"line\">这样就会重写属性</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）<br>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。</p>\n</blockquote>\n<p><strong>Symbol值通过Symbol函数生成,不能用new命令，基本上，它是一种类似于字符串的数据类型。</strong></p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\">typeof s</span><br><span class=\"line\">// \"Symbol\"</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>Symbol可以接收字符串 为参数 Symbol值可以显示转为字符串 下面提到</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol('foo');</span><br><span class=\"line\">s1 // Symbol(foo)</span><br><span class=\"line\">s1.toString() // \"Symbol(foo)\"</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>Symbol 接收参数是一个对象的话 就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = {</span><br><span class=\"line\">toString() {</span><br><span class=\"line\">    return 'abc';</span><br><span class=\"line\">}</span><br><span class=\"line\">};</span><br><span class=\"line\">const sym = Symbol(obj);</span><br><span class=\"line\">sym // Symbol(abc)</span><br></pre></td></tr></tbody></table>\n\n<p><strong>Symbol函数是为了独一无二，相同参数的Symbol函数的返回值是不相等的</strong></p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 没有参数的情况</span><br><span class=\"line\">var s1 = Symbol();</span><br><span class=\"line\">var s2 = Symbol();</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // false</span><br><span class=\"line\"></span><br><span class=\"line\">// 有参数的情况</span><br><span class=\"line\">var s1 = Symbol('foo');</span><br><span class=\"line\">var s2 = Symbol('foo');</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // false</span><br></pre></td></tr></tbody></table>\n\n<p><em>++++++s1和s2是两个Symbol值。如果不加参数，它们在控制台的输出都是Symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。</em></p>\n<p><strong>Symbol值不能与其他类型的值进行运算，会报错。</strong></p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sym = Symbol('My Symbol');</span><br><span class=\"line\"></span><br><span class=\"line\">\"your Symbol is \" + sym</span><br><span class=\"line\">// TypeError: can't convert Symbol to string</span><br><span class=\"line\">`your Symbol is ${sym}`</span><br><span class=\"line\">// TypeError: can't convert Symbol to string</span><br></pre></td></tr></tbody></table>\n\n<p><strong>Symbol值可以显式转为字符串,也可以转为布尔值</strong></p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sym = Symbol('My Symbol');</span><br><span class=\"line\"></span><br><span class=\"line\">String(sym) // 'Symbol(My Symbol)'</span><br><span class=\"line\">sym.toString() // 'Symbol(My Symbol)'</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var sym = Symbol();</span><br><span class=\"line\">Boolean(sym) // true</span><br><span class=\"line\">!sym  // false</span><br><span class=\"line\"></span><br><span class=\"line\">if (sym) {</span><br><span class=\"line\">// ...</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Number(sym) // TypeError: Cannot convert a Symbol value to a number</span><br><span class=\"line\">sym + 2 // TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></tbody></table>\n\n<hr>\n<h4 id=\"作为属性名的Symbol\"><a href=\"#作为属性名的Symbol\" class=\"headerlink\" title=\"作为属性名的Symbol\"></a><a href=\"#%E4%BD%9C%E4%B8%BA%E5%B1%9E%E6%80%A7%E5%90%8D%E7%9A%84Symbol\" title=\"作为属性名的Symbol\"></a>作为属性名的Symbol</h4><blockquote>\n<p>由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p>\n</blockquote>\n<blockquote>\n<p>下面代码通过方括号结构和Object.defineProperty，将对象的属性名指定为一个Symbol值。</p>\n</blockquote>\n<p>mySymbol</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 第一种写法</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">a[mySymbol] = 'Hello!';</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二种写法</span><br><span class=\"line\">var a = {</span><br><span class=\"line\">[mySymbol]: 'Hello!'</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">// 第三种写法</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">Object.defineProperty(a, mySymbol, { value: 'Hello!' });</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上写法都得到同样结果</span><br><span class=\"line\">a[mySymbol]  // \"Hello!\"</span><br></pre></td></tr></tbody></table>\n\n<p>还有一种是点运算符 赋值 先看下</p>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var mySymbol = Symbol();</span><br><span class=\"line\"> var a = {};</span><br><span class=\"line\"> a.mySymbol = 'Hello!';</span><br><span class=\"line\"> console.log(a.mySymbol)</span><br><span class=\"line\"> console.log(a[mySymbol])</span><br><span class=\"line\"> console.log(a['mySymbol'])</span><br><span class=\"line\">// VM642:5 Hello!</span><br><span class=\"line\">// undefined</span><br><span class=\"line\">// VM642:6 Hello!</span><br></pre></td></tr></tbody></table>\n\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var mySymbol = Symbol();</span><br><span class=\"line\">var a = {};</span><br><span class=\"line\">a.mySymbol = 'Hello me!';</span><br><span class=\"line\">a[mySymbol] = 'Hello you!';</span><br><span class=\"line\">console.log(a.mySymbol)   //</span><br><span class=\"line\">console.log(a[mySymbol])  //  你猜</span><br><span class=\"line\">console.log(a['mySymbol'])  //</span><br></pre></td></tr></tbody></table>\n\n<p><strong>因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个Symbol值。</strong></p>\n<blockquote>\n<p>*****在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中。 [Symbol(‘你想要的’)]：‘你想要的’ 取值一直没找到问题所在</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let s = Symbol();</span><br><span class=\"line\">let obj = {</span><br><span class=\"line\">  [s](arg) { ... }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let myobj = {</span><br><span class=\"line\">    [Symbol('name')]:'yongge'</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出yonge</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"属性名的遍历\"><a href=\"#属性名的遍历\" class=\"headerlink\" title=\"属性名的遍历\"></a><a href=\"#%E5%B1%9E%E6%80%A7%E5%90%8D%E7%9A%84%E9%81%8D%E5%8E%86\" title=\"属性名的遍历\"></a>属性名的遍历</h4><blockquote>\n<p>Symbol 作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。</p>\n</blockquote>\n<blockquote>\n<p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = {};</span><br><span class=\"line\">var a = Symbol('a');</span><br><span class=\"line\">var b = Symbol('b');</span><br><span class=\"line\"></span><br><span class=\"line\">obj[a] = 'Hello';</span><br><span class=\"line\">obj[b] = 'World';</span><br><span class=\"line\"></span><br><span class=\"line\">obj // {Symbol(a): \"Hello\", Symbol(b): \"World\"}</span><br><span class=\"line\"></span><br><span class=\"line\">var objectSymbols = Object.getOwnPropertySymbols(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">objectSymbols</span><br><span class=\"line\">// [Symbol(a), Symbol(b)]</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>另一个例子，Object.getOwnPropertySymbols方法与for…in循环、Object.getOwnPropertyNames方法进行对比的例子。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = {};</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = Symbol(\"foo\");</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(obj, foo, { value: \"foobar\"});</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i in obj) {</span><br><span class=\"line\">  console.log(i); // 无输出</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">Object.getOwnPropertyNames(obj)</span><br><span class=\"line\">// []</span><br><span class=\"line\"></span><br><span class=\"line\">Object.getOwnPropertySymbols(obj)</span><br><span class=\"line\">// [Symbol(foo)]</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>使用Object.getOwnPropertyNames方法得不到Symbol属性名，需要使用Object.getOwnPropertySymbols方法。另一个新的API，Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = {</span><br><span class=\"line\">  [Symbol('my_key')]: 1,</span><br><span class=\"line\">  enum: 2,</span><br><span class=\"line\">  nonEnum: 3</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">Reflect.ownKeys(obj)</span><br><span class=\"line\">// [Symbol(my_key), 'enum', 'nonEnum']</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"Symbol-for-，Symbol-keyFor\"><a href=\"#Symbol-for-，Symbol-keyFor\" class=\"headerlink\" title=\"Symbol.for()，Symbol.keyFor()\"></a><a href=\"#Symbol-for-%EF%BC%8CSymbol-keyFor\" title=\"Symbol.for()，Symbol.keyFor()\"></a>Symbol.for()，Symbol.keyFor()</h4><blockquote>\n<p>Symbol.for() 首先在全局中搜索有没有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。和直接的Symbol就点不同了。<br>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(“cat”)30次，每次都会返回同一个 Symbol 值，但是调用Symbol(“cat”)30次，会返回30个不同的Symbol值。</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol.for('foo');</span><br><span class=\"line\">var s2 = Symbol.for('foo');</span><br><span class=\"line\"></span><br><span class=\"line\">s1 === s2 // true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Symbol.for(\"bar\") === Symbol.for(\"bar\")</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol(\"bar\") === Symbol(\"bar\")</span><br><span class=\"line\">// false</span><br></pre></td></tr></tbody></table>\n\n<blockquote>\n<p>Symbol.keyFor方法返回一个已登记的Symbol类型值的key。实质就是检测该Symbol是否已创建</p>\n</blockquote>\n<table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s1 = Symbol.for(\"foo\");</span><br><span class=\"line\">Symbol.keyFor(s1) // \"foo\"</span><br><span class=\"line\"></span><br><span class=\"line\">var s2 = Symbol(\"foo\");</span><br><span class=\"line\">Symbol.keyFor(s2) // undefined</span><br></pre></td></tr></tbody></table>\n\n<h4 id=\"内置Symbol\"><a href=\"#内置Symbol\" class=\"headerlink\" title=\"内置Symbol\"></a><a href=\"#%E5%86%85%E7%BD%AESymbol\" title=\"内置Symbol\"></a>内置Symbol</h4><p>除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法</p>\n<p>　　1、Symbol.haslnstance</p>\n<p>　　一个在执行instanceof时调用的内部方法，用于检测对象的继承信息</p>\n<p>　　2、Symbol.isConcatSpreadable</p>\n<p>　　一个布尔值，用于表示当传递一个集合作为Array.prototype.concat()方法的参数时，是否应该将集合内的元素规整到同一层级</p>\n<p>　　3、Symbol.iterator</p>\n<p>　　一个返回迭代器的方法</p>\n<p>　　4、Symbol.match</p>\n<p>　　一个在调用String.prototype.match()方法时调用的方法，用于比较字符串</p>\n<p>　　5、Symbol.replace</p>\n<p>　　一个在调用String.prototype.replace()方法时调用的方法，用于替换字符串的子串</p>\n<p>　　6、Symbol.search</p>\n<p>　　一个在调用String.prototype.search()方法时调用的方法，用于在字符串中定位子串</p>\n<p>　　7、Symbol.species</p>\n<p>　　用于创建派生类的构造函数</p>\n<p>　　8、Symbol.split</p>\n<p>　　一个在调用String.prototype.split()方法时调用的方法，用于分割字符串</p>\n<p>　　9、Symbol.toprimitive</p>\n<p>　　一个返回对象原始值的方法</p>\n<p>　　10、Symbol.ToStringTag</p>\n<p>　　一个在调用Object.prototype.toString()方法时使用的字符串，用于创建对象描述</p>\n<p>　　11、Symbol.unscopables</p>\n<p>　　一个定义了一些不可被with语句引用的对象属性名称的对象集合</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}